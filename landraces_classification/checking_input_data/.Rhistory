iris[,1:4] %>% cor(method = "pearson")
iris[,1:4] %>% scale %>% cor(method = "pearson")
iris[,1:4] %>% scale %>% head()
plot(genotypic_climate$Longitude, genotypic_climate$Latitude, pch=20)
library(PCAmixdata)
View(iris)
library(mvoutlier)
install.packages("mvoutlier")
library("mvoutlier", lib.loc="~/R/win-library/3.4")
data(humus)
humus %>% head
humus %>% cor(method = "pearson")
d <- humus[,c("As","Cd","Co","Cu","Mg","Pb","Zn")]
pairs(d)
res <- mvoutlier.CoDa(d)
res
str(res)
plot(res,onlyout=TRUE,which="biplot",bw=FALSE,symb=TRUE,symbtxt=TRUE)
install.packages(c("diagram", "httr", "NLP", "plotrix", "rmapshaper", "robCompositions", "shape", "shiny"))
options(warn = -1); options(scipen = 999); g <- gc(reset = T); rm(list = ls())
suppressMessages(library(tidyverse))
suppressMessages(library(readxl))
suppressMessages(library(rgdal))
suppressMessages(library(sp))
suppressMessages(library(raster))
suppressMessages(library(ncdf4))
suppressMessages(library(rasterVis))
suppressMessages(library(htmlwidgets))
suppressMessages(library(compiler))
suppressMessages(library(leaflet))
suppressMessages(library(highcharter))
suppressMessages(library(plotly))
suppressMessages(library(d3heatmap))
suppressMessages(library(cluster))
suppressMessages(library(FactoMineR))
suppressMessages(library(factoextra))
suppressMessages(library(corrplot))
suppressMessages(library(Rtsne))
suppressMessages(library(randomForest))
genotypic_climate <- read.csv("D:/ToBackup/climate_and_crop_modelling/cwr-landraces/Input_data/genotypic_climate.csv")
glimpse(genotypic_climate)
genotypic_climate_cmplt <- genotypic_climate[complete.cases(genotypic_climate),]
genotypic_climate_cmplt <- unique(genotypic_climate_cmplt); rownames(genotypic_climate_cmplt) <- 1:nrow(genotypic_climate_cmplt)
genotypic_climate_cmplt %>% dplyr::select(Elevation, Longitude, Latitude, Seed.weight, wc2.0_bio_30s_01:wc2.0_bio_30s_18) %>%
gather(Variable, Value) %>% ggplot(aes(x = Value, fill = Variable, alpha = .6)) +
geom_density() +
facet_wrap(~ Variable, scales = "free") +
theme_bw() +
theme(legend.position = "bottom") +
theme(legend.title = element_text(face = "bold")) +
guides(alpha = F, fill = F) +
theme(strip.text = element_text(size = 12, face = "bold")) +
theme(axis.title.x = element_text(size = 13, face = 'bold'),
axis.title.y = element_text(size = 13, face = 'bold'),
axis.text = element_text(size = 12))
genotypic_climate_cmplt %>% dplyr::select(Elevation, Longitude, Latitude, Seed.weight, wc2.0_bio_30s_01:wc2.0_bio_30s_18) %>%
gather(Variable, Value) %>% ggplot(aes(x = Value, fill = Variable, alpha = .6)) +
geom_histogram() +
facet_wrap(~ Variable, scales = "free") +
theme_bw() +
theme(legend.position = "bottom") +
theme(legend.title = element_text(face = "bold")) +
guides(alpha = F, fill = F) +
theme(strip.text = element_text(size = 12, face = "bold")) +
theme(axis.title.x = element_text(size = 13, face = 'bold'),
axis.title.y = element_text(size = 13, face = 'bold'),
axis.text = element_text(size = 12))
genotypic_climate %>% glimpse
genotypic_climate_cmplt %>% dplyr::select(Elevation, Longitude, Latitude, Seed.weight, wc2.0_bio_30s_01:wc2.0_bio_30s_18) %>%
psych::describe() %>% select(mean, sd, median, min, max, range)
genotypic_climate_cmplt %>% dplyr::select(Growth.habit, Seed.color, Seed.shape, Seed.brightness, Owner) %>%
gather(measure, value) %>%
count(measure, value) %>%
spread(measure, n) %>% head
genotypic_climate_cmplt %>% dplyr::select(Growth.habit, Seed.color, Seed.shape, Seed.brightness, Owner) %>%
gather(measure, value) %>%
count(measure, value) %>%
spread(measure, n) %>%
gather(key = Variable, value = Count, Growth.habit:Seed.shape) %>% head
fqTable <- genotypic_climate_cmplt %>% dplyr::select(Growth.habit, Seed.color, Seed.shape, Seed.brightness, Owner) %>%
gather(measure, value) %>%
count(measure, value) %>%
spread(measure, n) %>%
gather(key = Variable, value = Count, Growth.habit:Seed.shape) %>% head
fqTable %>% ggplot(aes(x = Category, y = Percentage*100)) +
geom_bar(stat = "identity") +
xlab("") + ylab("Porcentaje (%)") +
coord_flip() +
facet_wrap(~ Variable, scales = "free") +
theme_bw() +
theme(strip.text = element_text(size = 12, face = "bold")) +
theme(axis.title.x = element_text(size = 13, face = 'bold'),
axis.title.y = element_text(size = 13, face = 'bold'),
axis.text = element_text(size = 12))
fqTable <- genotypic_climate_cmplt %>% dplyr::select(Growth.habit, Seed.color, Seed.shape, Seed.brightness, Owner) %>%
gather(measure, value) %>%
count(measure, value) %>%
spread(measure, n) %>%
gather(key = Variable, value = Count, Growth.habit:Seed.shape)
fqTable <- fqTable[complete.cases(fqTable),]; rownames(fqTable) <- 1:nrow(fqTable); colnames(fqTable)[1] <- "Category"
fqTable <- fqTable %>% dplyr::mutate(Percentage = Count/nrow(df))
View(fqTable)
View(fqTable)
fqTable %>% dplyr::mutate(Percentage = Count/nrow(df))
fqTable <- fqTable %>% dplyr::mutate(Percentage = Count/nrow(genotypic_climate_cmplt))
View(fqTable)
fqTable %>% ggplot(aes(x = Category, y = Percentage*100)) +
geom_bar(stat = "identity") +
xlab("") + ylab("Percentage (%)") +
coord_flip() +
facet_wrap(~ Variable, scales = "free") +
theme_bw() +
theme(strip.text = element_text(size = 12, face = "bold")) +
theme(axis.title.x = element_text(size = 13, face = 'bold'),
axis.title.y = element_text(size = 13, face = 'bold'),
axis.text = element_text(size = 12))
options(warn = -1); options(scipen = 999); g <- gc(reset = T); rm(list = ls())
# Load packages
suppressMessages(library(tidyverse))
suppressMessages(library(readxl))
suppressMessages(library(rgdal))
suppressMessages(library(sp))
suppressMessages(library(raster))
suppressMessages(library(ncdf4))
suppressMessages(library(rasterVis))
suppressMessages(library(htmlwidgets))
suppressMessages(library(compiler))
suppressMessages(library(leaflet))
suppressMessages(library(highcharter))
suppressMessages(library(plotly))
suppressMessages(library(d3heatmap))
suppressMessages(library(cluster))
suppressMessages(library(FactoMineR))
suppressMessages(library(factoextra))
suppressMessages(library(corrplot))
suppressMessages(library(Rtsne))
suppressMessages(library(randomForest))
genotypic_climate <- read.csv("D:/ToBackup/climate_and_crop_modelling/cwr-landraces/Input_data/genotypic_climate.csv")
genotypic_climate %>% glimpse
genotypic_climate_cmplt <- genotypic_climate[complete.cases(genotypic_climate),]
genotypic_climate_cmplt <- unique(genotypic_climate_cmplt); rownames(genotypic_climate_cmplt) <- 1:nrow(genotypic_climate_cmplt)
fqTable %>% ggplot(aes(x =  reorder(Category, -Percentage), y = Percentage*100)) +
geom_bar(stat = "identity") +
xlab("") + ylab("Percentage (%)") +
coord_flip() +
facet_wrap(~ Variable, scales = "free") +
theme_bw() +
theme(strip.text = element_text(size = 12, face = "bold")) +
theme(axis.title.x = element_text(size = 13, face = 'bold'),
axis.title.y = element_text(size = 13, face = 'bold'),
axis.text = element_text(size = 12))
fqTable <- genotypic_climate_cmplt %>% dplyr::select(Growth.habit, Seed.color, Seed.shape, Seed.brightness, Owner) %>%
gather(measure, value) %>%
count(measure, value) %>%
spread(measure, n) %>%
gather(key = Variable, value = Count, Growth.habit:Seed.shape)
fqTable <- fqTable[complete.cases(fqTable),]; rownames(fqTable) <- 1:nrow(fqTable); colnames(fqTable)[1] <- "Category"
fqTable <- fqTable %>% dplyr::mutate(Percentage = Count/nrow(genotypic_climate_cmplt))
fqTable %>% ggplot(aes(x =  reorder(Category, -Percentage), y = Percentage*100)) +
geom_bar(stat = "identity") +
xlab("") + ylab("Percentage (%)") +
coord_flip() +
facet_wrap(~ Variable, scales = "free") +
theme_bw() +
theme(strip.text = element_text(size = 12, face = "bold")) +
theme(axis.title.x = element_text(size = 13, face = 'bold'),
axis.title.y = element_text(size = 13, face = 'bold'),
axis.text = element_text(size = 12))
fqTable %>% ggplot(aes(x =  reorder(Category, Percentage), y = Percentage*100)) +
geom_bar(stat = "identity") +
xlab("") + ylab("Percentage (%)") +
coord_flip() +
facet_wrap(~ Variable, scales = "free") +
theme_bw() +
theme(strip.text = element_text(size = 12, face = "bold")) +
theme(axis.title.x = element_text(size = 13, face = 'bold'),
axis.title.y = element_text(size = 13, face = 'bold'),
axis.text = element_text(size = 12))
genotypic_climate_cmplt %>% dplyr::select(Elevation, Longitude, Latitude, Seed.weight, wc2.0_bio_30s_01:wc2.0_bio_30s_18) %>%
gather(Variable, Value) %>% ggplot(aes(x = Value, fill = Variable, alpha = .6)) +
geom_histogram() +
facet_wrap(~ Variable, scales = "free") +
theme_bw() +
theme(legend.position = "bottom") +
theme(legend.title = element_text(face = "bold")) +
guides(alpha = F, fill = F) +
theme(strip.text = element_text(size = 12, face = "bold")) +
theme(axis.title.x = element_text(size = 13, face = 'bold'),
axis.title.y = element_text(size = 13, face = 'bold'),
axis.text = element_text(size = 12))
View(genotypic_climate_cmplt)
install.packages("MVN")
install.packages("referenceIntervals")
library("referenceIntervals")
library("referenceIntervals")
library("referenceIntervals")
options(warn = -1); options(scipen = 999); g <- gc(reset = T); rm(list = ls())
options(warn = -1); options(scipen = 999); g <- gc(reset = T); rm(list = ls())
suppressMessages(library(tidyverse))
suppressMessages(library(readxl))
suppressMessages(library(rgdal))
suppressMessages(library(sp))
suppressMessages(library(raster))
suppressMessages(library(ncdf4))
suppressMessages(library(rasterVis))
suppressMessages(library(htmlwidgets))
suppressMessages(library(compiler))
suppressMessages(library(leaflet))
suppressMessages(library(highcharter))
suppressMessages(library(plotly))
suppressMessages(library(d3heatmap))
suppressMessages(library(cluster))
suppressMessages(library(factoextra))
suppressMessages(library(gtools))
options(warn = -1); options(scipen = 999); g <- gc(reset = T); rm(list = ls())
OSys <- Sys.info(); OSys <- OSys[names(OSys)=="sysname"]
if(OSys == "Linux"){ root <- "/mnt" } else {
if(OSys == "Windows"){ root <- "//dapadfs" }
}; rm(OSys)
options(warn = -1); options(scipen = 999); g <- gc(reset = T); rm(list = ls())
OSys <- Sys.info(); OSys <- OSys[names(OSys)=="sysname"]
if(OSys == "Linux"){ root <- "/mnt/workspace_cluster_9" } else {
if(OSys == "Windows"){ root <- "//dapadfs/Workspace_cluster_9" }
}; rm(OSys)
root
ciat <- read.csv("//dapadfs/Workspace_cluster_9/gap_analysis_landraces/Input_data/_ocurrence_data/_ciat_data/Bean/BEAN-GRP-CIAT.csv")
root
paste0(root, "/gap_analysis_landraces/Input_data/_ocurrence_data/_ciat_data/Bean/BEAN-GRP-CIAT.csv")
mapspam <- raster::brick(paste0(root, "/gap_analysis_landraces/Input_data/_crop_areas/MapSPAM/Bean/spam2005v2r0_harvested-area_bean_total.nc"), lvar = 4)
mapspam <- mapspam[[1]]
plot(mapspam)
options(warn = -1); options(scipen = 999); g <- gc(reset = T); rm(list = ls())
OSys <- Sys.info(); OSys <- OSys[names(OSys)=="sysname"]
if(OSys == "Linux"){ root <- "/mnt/workspace_cluster_9" } else {
if(OSys == "Windows"){ root <- "//dapadfs/Workspace_cluster_9" }
}; rm(OSys)
suppressMessages(library(tidyverse))
suppressMessages(library(readxl))
suppressMessages(library(rgdal))
suppressMessages(library(sp))
suppressMessages(library(raster))
suppressMessages(library(ncdf4))
suppressMessages(library(rasterVis))
suppressMessages(library(htmlwidgets))
suppressMessages(library(compiler))
suppressMessages(library(leaflet))
suppressMessages(library(highcharter))
suppressMessages(library(plotly))
suppressMessages(library(d3heatmap))
suppressMessages(library(cluster))
suppressMessages(library(factoextra))
suppressMessages(library(gtools))
options(warn = -1); options(scipen = 999); g <- gc(reset = T); rm(list = ls())
OSys <- Sys.info(); OSys <- OSys[names(OSys)=="sysname"]
if(OSys == "Linux"){ root <- "/mnt/workspace_cluster_9" } else {
if(OSys == "Windows"){ root <- "//dapadfs/Workspace_cluster_9" }
}; rm(OSys)
suppressMessages(library(tidyverse))
suppressMessages(library(readxl))
suppressMessages(library(rgdal))
suppressMessages(library(sp))
suppressMessages(library(raster))
suppressMessages(library(ncdf4))
suppressMessages(library(rasterVis))
suppressMessages(library(htmlwidgets))
suppressMessages(library(compiler))
suppressMessages(library(leaflet))
suppressMessages(library(highcharter))
suppressMessages(library(plotly))
suppressMessages(library(d3heatmap))
suppressMessages(library(cluster))
suppressMessages(library(factoextra))
suppressMessages(library(gtools))
ciat <- read.csv(paste0(root, "/gap_analysis_landraces/Input_data/_ocurrence_data/_ciat_data/Bean/BEAN-GRP-CIAT.csv"))
nrow(ciat) # 37987
sum(ciat$Type.of.material == "Landrace", na.rm = T) # 27644
sum(!is.na(ciat$Common.names), na.rm = T) # 37987
sum(ciat$Type.of.material == "Landrace" & !is.na(ciat$Common.names), na.rm = T) # 17345
names(ciat)
table(ciat$Type.of.material)
table(ciat$Common.names)
sum(!is.na(ciat$Common.names))
sum(is.na(ciat$Common.names))
sum(ciat$Type.of.material == "Landrace" & !is.na(ciat$Common.names), na.rm = T) # 17345
plot(ciat$`Longitude (decimal)`, ciat$`Latitude (decimal)`, pch = 20)
names(ciat\)
names(ciat)
ciat <- read.csv(paste0(root, "/gap_analysis_landraces/Input_data/_ocurrence_data/_ciat_data/Bean/BEAN-GRP-CIAT.csv"))
sum(ciat$Type_of_material == "Landrace", na.rm = T) # 27644
ciat <- read.csv(paste0(root, "/gap_analysis_landraces/Input_data/_ocurrence_data/_ciat_data/Bean/BEAN-GRP-CIAT.csv"))
nrow(ciat) # 37987
sum(ciat$Type_of_material == "Landrace", na.rm = T) # 27644
sum(!is.na(ciat$Common_names), na.rm = T) # 37987
sum(ciat$Type_of_material == "Landrace" & !is.na(ciat$Common_names), na.rm = T) # 27644
plot(ciat$Longitude, ciat$Latitude, pch = 20)
shp_wld <- rgdal::readOGR(dsn = paste0(root, "/gap_analysis_landraces/Input_data/_maps/Global_administrative_unit_layers/gaul_2014"), layer = "G2014_2013_1")
ciat <- ciat[which(!is.na(ciat$Longitude) & !is.na(ciat$Latitude)),]
rownames(ciat) <- 1:nrow(ciat)
nrow(ciat) # 22032
over_res <- sp::over(SpatialPoints(coords = data.frame(lon = ciat$Longitude, lat = ciat$Latitude), proj4string = CRS(projargs = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")), as(shp_wld, "SpatialPolygons"))
ciat$Wrong.coordinates <- as.numeric(is.na(over_res))
sum(ciat$Wrong.coordinates) # 153
sum(ciat$Type_of_material == "Landrace", na.rm = T) # 18474
sum(ciat$Type_of_material == "Landrace" & ciat$Wrong.coordinates == 1, na.rm = T) # 142
ciat_landraces <- ciat %>% filter(Type_of_material == "Landrace")
mapspam <- raster::brick(paste0(root, "/gap_analysis_landraces/Input_data/_crop_areas/MapSPAM/Bean/spam2005v2r0_harvested-area_bean_total.nc"), lvar = 4)
mapspam <- mapspam[[1]]
plot(mapspam)
levelplot(x = mapspam[[1]], par.settings = RdBuTheme)
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(mapspam), na.color = "transparent")
m <- leaflet() %>% addTiles() %>%
addRasterImage(mapspam, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(mapspam),
title = "MapSPAM harvested area") %>%
addCircles(~`Longitude (decimal)`, ~`Latitude (decimal)`, weight = 3, radius = 40,
color = "#ffa500", stroke = TRUE, fillOpacity = 0.8, data = ciat_landraces) # popup = ct$type,
m
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(mapspam), na.color = "transparent")
m <- leaflet() %>% addTiles() %>%
addRasterImage(mapspam, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(mapspam),
title = "MapSPAM harvested area") %>%
addCircles(~Longitude, ~Latitude, weight = 3, radius = 40,
color = "#ffa500", stroke = TRUE, fillOpacity = 0.8, data = ciat_landraces) # popup = ct$type,
m
View(ciat_landraces)
countryList <- unique(as.character(shp_wld@data$ADM0_NAME))
# Discard antarctica's country
countryList <- countryList[which(countryList!="Antarctica")]
# Calculate sum of harvested area
calc_suma <- function(rObject ,i){
country <- shp_wld[shp_wld@data$ADM0_NAME== countryList[i],]
country_data <- raster::crop(rObject, extent(country)) # cut raster by conutries shape's
country_data <- raster::mask(x = country_data, mask = country) #create a new raster from the cropped shape
values <- sum(!is.na(sp::over(SpatialPoints(coords = unique(data.frame(lon = ciat_landraces$Longitude,
lat = ciat_landraces$Latitude)),
proj4string = CRS(projargs = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")),
as(country, "SpatialPolygons"))), na.rm = T)
values2 <- sum(country_data[], na.rm = T)
country_data <- data.frame(ADM0_CODE = shp_wld@data$ADM0_CODE[which(shp_wld@data$ADM0_NAME == countryList[i])], Country = countryList[i], Count = sum(na.omit(values)), Harvested.area = values2)
cat(paste0("Country: ", countryList[i], " done!\n"))
return(country_data)
}
calc_suma <- function(rObject ,i){
country <- shp_wld[shp_wld@data$ADM0_NAME== countryList[i],]
country_data <- raster::crop(rObject, extent(country)) # cut raster by conutries shape's
country_data <- raster::mask(x = country_data, mask = country) #create a new raster from the cropped shape
values <- sum(!is.na(sp::over(SpatialPoints(coords = unique(data.frame(lon = ciat_landraces$Longitude,
lat = ciat_landraces$Latitude)),
proj4string = CRS(projargs = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")),
as(country, "SpatialPolygons"))), na.rm = T)
values2 <- sum(country_data[], na.rm = T)
country_data <- data.frame(ADM0_CODE = shp_wld@data$ADM0_CODE[which(shp_wld@data$ADM0_NAME == countryList[i])], Country = countryList[i], Count = sum(na.omit(values)), Harvested.area = values2)
cat(paste0("Country: ", countryList[i], " done!\n"))
return(country_data)
}
calc_suma <- cmpfun(calc_suma) # Compilate this function
is.compile <- function(func){
# This function lets us know if a function has been byte-coded or not
# If you have a better idea for how to do this - please let me know...
if(class(func) != "function") stop("You need to enter a function")
last_2_lines <- tail(capture.output(func),2)
any(grepl("bytecode:", last_2_lines)) # returns TRUE if it finds the text "bytecode:" in any of the last two lines of the function's print
}
is.compile(calc_suma)
rm(ciat)
rm(over_res)
f <- list()
for(i in 1:length(countryList)){f[[i]] <- calc_suma(rObject = mapspam[[1]], i = i)}
df <- do.call(rbind, f)
df <- unique(df); rownames(df) <- 1:nrow(df)
rm(f, i, countryList)
df$Count <- (df$Count - min(df$Count, na.rm = T))/(max(df$Count, na.rm = T) - min(df$Count, na.rm = T))
df$Harvested.area <- (df$Harvested.area - min(df$Harvested.area, na.rm = T))/(max(df$Harvested.area, na.rm = T) - min(df$Harvested.area, na.rm = T))
highchart() %>%
hc_title(text = "Scatter chart with number of coordinates and total harvested area by country") %>%
hc_add_series_scatter(x = df$Count, y = df$Harvested.area, color = df$Harvested.area, label = df$Country)
plot_ly(df, x = df$Count, y = df$Harvested.area,
text = paste(df$Country),
mode = "markers", color = df$Harvested.area, size = df$Count)
df[which(df$Count > 0), c("Country", "Count", "Harvested.area")] %>% gather(key = Variable, value = Value, -Country) %>%
ggplot(aes(x = reorder(Country, Value), y = Value, fill = Variable)) +
geom_bar(stat = "identity", position = position_dodge()) +
scale_fill_brewer(palette = "Paired") + theme_minimal() +
xlab("Country") + ylab("Standarized value") + theme(axis.text.x = element_text(angle = 90))
rownames(df) <- df$Country
earthstat <- raster::brick("D:/ToBackup/climate_and_crop_modelling/cwr-landraces/Input_data/EarthStat_data/bean_HarvAreaYield2000_NetCDF/bean_AreaYieldProduction.nc", lvar = 4)
earthstat <- earthstat[[5]]
root
earthstat <- raster::brick(paste0(root, "/gap_analysis_landraces/Input_data/_crop_areas/EarthStat/Bean/bean_AreaYieldProduction.nc"), lvar = 4)
earthstat <- earthstat[[5]]
sheet_names <- excel_sheets(paste0(root, "/gap_analysis_landraces/Input_data/_ocurrence_data/_usda_data/Bean/GRIN_GLOBAL_BEAN_LAND.xlsx"))
sheet_names
GRIN <- lapply(sheet_names, function(x){
read_excel(path = filename, sheet = x)
}); names(GRIN) <- sheet_names; rm(sheet_names, filename)
View(ciat_landraces)
ciat_landraces$Seed_color
table(ciat_landraces$Seed_color)
unique(as.character(ciat_landraces$Seed_color))
grep(pattern = "blue", x = unique(as.character(ciat_landraces$Seed_color)))
load("//dapadfs/workspace_cluster_3/bid-cc-agricultural-sector/19-BID-reanalysis/Bean/historical/final/BEAN_rainfed_ICTAOstua_WFD.RDat")
Run[[28]] %>% View()
lapply(Run, function(x){
dur <- x$MDAT - x$PDAT
return(dur)
})
Run[[935]] %>% View
Run[[935]]$MDAT%%1000
x$MDAT <- x$MDAT%%1000
lapply(Run, function(x){
x$MDAT <- x$MDAT%%1000
x$PDAT <- x$PDAT%%1000
dur <- ifelse(test = x$MDAT > x$PDAT, yes = x$MDAT - x$PDAT, no = 365 - x$PDAT + x$MDAT)
return(dur)
})
res <- lapply(Run, function(x){
x$MDAT <- x$MDAT%%1000
x$PDAT <- x$PDAT%%1000
dur <- ifelse(test = x$MDAT > x$PDAT, yes = x$MDAT - x$PDAT, no = 365 - x$PDAT + x$MDAT)
return(dur)
})
res <- do.call(c, res)
res %>% hist
Run[[28]] %>% View
Run[[948]] %>% View
res <- lapply(Run, function(x){
x$MDAT <- x$MDAT%%1000
x$PDAT <- x$PDAT%%1000
x[which(x == "-99")] <- NA
dur <- ifelse(test = x$MDAT > x$PDAT, yes = x$MDAT - x$PDAT, no = 365 - x$PDAT + x$MDAT)
return(dur)
})
res <- lapply(Run, function(x){
end <- x$MDAT
start <- x$PDAT
end <- end[which(end != -99)]
start <- start[which(start != -99)]
end <- end%%1000
start <- start%%1000
dur <- ifelse(test = end > start, yes = end - start, no = 365 - start + end)
return(dur)
})
res <- do.call(c, res)
res %>% hist
hist(res, main = "ICTA Ostua duration: new runs MDAT - PDAT")
hist(res, main = "ICTA Ostua duration: new runs (MDAT - PDAT)")
load("//dapadfs/workspace_cluster_3/bid-cc-agricultural-sector/12-Resultados/Frijol/Frijol-3cultivars_withCO2/_Frijol_Secano_ICTAOstua_WFD.RDat")
res <- lapply(Run, function(x){
end <- x$MDAT
start <- x$PDAT
end <- end[which(end != -99)]
start <- start[which(start != -99)]
end <- end%%1000
start <- start%%1000
dur <- ifelse(test = end > start, yes = end - start, no = 365 - start + end)
return(dur)
})
res <- do.call(c, res)
hist(res, main = "ICTA Ostua duration: new runs (MDAT - PDAT)")
load("//dapadfs/workspace_cluster_3/bid-cc-agricultural-sector/19-BID-reanalysis/Bean/historical/final/BEAN_rainfed_ICTAOstua_WFD.RDat")
res <- lapply(Run, function(x){
end <- x$MDAT
start <- x$PDAT
end <- end[which(end != -99)]
start <- start[which(start != -99)]
end <- end%%1000
start <- start%%1000
dur <- ifelse(test = end > start, yes = end - start, no = 365 - start + end)
return(dur)
})
res <- do.call(c, res)
hist(res, main = "ICTA Ostua duration: new runs (MDAT - PDAT)")
load("//dapadfs/workspace_cluster_3/bid-cc-agricultural-sector/12-Resultados/Frijol/Frijol-3cultivars_withCO2/_Frijol_Secano_ICTAOstua_WFD.RDat")
res <- lapply(Run, function(x){
end <- x$MDAT
start <- x$PDAT
end <- end[which(end != -99)]
start <- start[which(start != -99)]
end <- end%%1000
start <- start%%1000
dur <- ifelse(test = end > start, yes = end - start, no = 365 - start + end)
return(dur)
})
res <- do.call(c, res)
hist(res, main = "ICTA Ostua duration: old runs (MDAT - PDAT)")
load("//dapadfs/workspace_cluster_3/bid-cc-agricultural-sector/19-BID-reanalysis/Bean/historical/final/BEAN_rainfed_ICTAOstua_WFD.RDat")
res <- lapply(Run, function(x){
end <- x$MDAT
start <- x$SDAT # SDAT
end <- end[which(end != -99)]
start <- start[which(start != -99)]
end <- end%%1000
start <- start%%1000
dur <- ifelse(test = end > start, yes = end - start, no = 365 - start + end)
return(dur)
})
res <- do.call(c, res)
hist(res, main = "ICTA Ostua duration: new runs (MDAT - PDAT)")
load("//dapadfs/workspace_cluster_3/bid-cc-agricultural-sector/12-Resultados/Frijol/Frijol-3cultivars_withCO2/_Frijol_Secano_ICTAOstua_WFD.RDat")
res <- lapply(Run, function(x){
end <- x$MDAT
start <- x$SDAT # SDAT, PDAT
end <- end[which(end != -99)]
start <- start[which(start != -99)]
end <- end%%1000
start <- start%%1000
dur <- ifelse(test = end > start, yes = end - start, no = 365 - start + end)
return(dur)
})
res <- do.call(c, res)
hist(res, main = "ICTA Ostua duration: old runs (MDAT - PDAT)")

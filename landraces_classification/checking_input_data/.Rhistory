cor(dissMat)
hist(dissMat[,1])
TSclust::diss.EUCL(x = as.numeric(df[1, -1]), y = as.numeric(df[2, -1]))
TSclust::diss.EUCL(x = scale(as.numeric(df[1, -1])), y = scale(as.numeric(df[2, -1])))
TSclust::diss.EUCL(x = as.numeric(scale(df[1, -1])), y = (scale(as.numeric(df[2, -1])))
})
TSclust::diss.EUCL(x = as.numeric(scale(df[1, -1])), y = as.numeric(scale(df[2, -1])))
scale(df[1, -1])
TSclust::diss.EUCL(x = as.numeric((df[1, -1]-mean(df[1, -1]))/sd(df[1, -1])), y = as.numeric((df[2, -1]-mean(df[2, -1]))/sd(df[2, -1])))
df[1, -1]
df[1, -1]-mean(df[1, -1])
mean(df[1, -1])
(df[1, -1]-mean(as.numeric(df[1, -1])))
as.numeric((df[1, -1]-mean(as.numeric(df[1, -1])))/sd(as.numeric(df[1, -1])))
TSclust::diss.EUCL(x = as.numeric((df[1, -1]-mean(as.numeric(df[1, -1])))/sd(as.numeric(df[1, -1]))), y = as.numeric((df[2, -1]-mean(as.numeric(df[2, -1])))/sd(as.numeric(df[2, -1]))))
View(dissMat)
View(df)
dim(dissMat)
cor(dissMat[,-12])
dissMat <- dissMat[,-12]
FactoMineR::PCA(X = dissMat, scale.unit = T)
?diss.NCD
as.numeric(df[2, -1])
object.size(as.numeric(df[2, -1]))
View(df)
totrain_pca <- FactoMineR::PCA(X = df, scale.unit = T)
totrain_pca <- FactoMineR::PCA(X = df[,-1], scale.unit = T)
FactoMineR::HCPC(res = totrain_pca, nb.clust = -1)
totrain_pca_cluster <- FactoMineR::HCPC(res = totrain_pca, nb.clust = -1)
View(totrain_pca_cluster$data.clust)
map_template <- readRDS("//dapadfs/Workspace_cluster_9/CWR_pre-breeding/Input_data/AgMerra_template.RDS")
map_template[] <- NA
df$cellID
map_template[df$cellID] <- dissMat[,1]
plot(map_template)
plot(map_template, xlim = c(-130, -50), ylim = c(-10, 50))
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
map_template[df$cellID] <- dissMat[,2]
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
map_template[df$cellID] <- dissMat[,3]
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
map_template[df$cellID] <- dissMat[,4]
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
map_template[df$cellID] <- dissMat[,5]
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
map_template[df$cellID] <- dissMat[,1]
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
cluster_data <- totrain_pca_cluster$data.clust
cluster_data$cellID <- df$cellID
xyFromCell(object = map_template, cell = cluster_data$cellID[cluster_data$clust == 1])
points(xyFromCell(object = map_template, cell = cluster_data$cellID[cluster_data$clust == 1]), col=4, pch = 20, cex = .3)
map_template[df$cellID] <- dissMat[,1]
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
par(mfrow = c(1,2))
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
points(xyFromCell(object = map_template, cell = cluster_data$cellID[cluster_data$clust == 1]), col=4, pch = 20, cex = .3)
par(mfrow = c(1,2))
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
points(xyFromCell(object = map_template, cell = cluster_data$cellID[cluster_data$clust == 1]), col=4, pch = 20, cex = .3)
par(mfrow = c(1,2))
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
points(xyFromCell(object = map_template, cell = cluster_data$cellID[cluster_data$clust == 1]), col=4, pch = 20, cex = .3)
totrain_pca <- FactoMineR::PCA(X = df[,-1], scale.unit = T)
totrain_pca_cluster <- FactoMineR::HCPC(res = totrain_pca, nb.clust = -1)
library(tidyverse)
trainData <- read.csv('https://raw.githubusercontent.com/selva86/datasets/master/breastcancer_training.csv')
testData <- read.csv('https://raw.githubusercontent.com/selva86/datasets/master/breastcancer_test.csv')
library(tidyverse)
library(caret)
# 2. Build Logistic Model
logitmod <- glm(Class ~ Cl.thickness + Cell.size + Cell.shape, family = "binomial", data=trainData)
# 3. Predict on testData
pred <- predict(logitmod, newdata = testData, type = "response")
pred
# 4. If p > .5, then Class is 1 else 0
y_pred <- ifelse(pred > 0.5, 1, 0)
y_act <- testData$Class
mean(y_pred == y_act)  # 94%
library(caret)
caret::confusionMatrix(y_pred, y_act, positive="1", mode="everything")
install.packages("odbc")
30*4
install.packages()
install.packages("RSelenium")
library(RSelenium)
irrigation <- raster::raster(paste0(root, '/gap_analysis_landraces/Input_data/_maps/gmia_v5_aei_ha.asc'))
accessibility
names(mapspam) <- c("Harvested.area", "Physical.area", "Production", "Yield")
library(ggplot2)
dGP1
shp_ame <- rgdal::readOGR(dsn = paste0(root, "/gap_analysis_landraces/Input_data/_maps/_shp_americas"), layer = "AMERICAS")
over_res <- sp::over(SpatialPoints(coords = data.frame(lon = biophysicalVars$Longitude, lat = biophysicalVars$Latitude), proj4string = CRS(projargs = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")), as(shp_ame, "SpatialPolygons"))
biophysicalVars$Analysis <- as.numeric(is.na(over_res)); rm(over_res)
biophysicalVars$Analysis[which(biophysicalVars$Analysis == "0")] <- "Americas"
biophysicalVars$Analysis[which(biophysicalVars$Analysis == "1")] <- "World"
rm(shp_ame)
all_df2 <- dplyr::left_join(x = biophysicalVars, y = ciat, by = c("ID", "Longitude", "Latitude"))
all_df2 <- dplyr::left_join(x = all_df2, y = humanFactors, by = c("ID", "Longitude", "Latitude"))
ciat %>% dplyr::filter(!is.na(Longitude) & !is.na(Altitude) &
!is.na(Growth.habit) & !is.na(Seed.color) &
!is.na(Seed.shape) & !is.na(Seed.brightness) &
!is.na(Seed.weight) & !is.na(Protein) &
!is.na(Genepool.protein)) %>% dim
humanFactors <- readRDS(paste0(root, "/gap_analysis_landraces/Input_data/_occurrence_data/_ciat_data/Bean/BEAN-GRP-COORDINATES-HUMAN-FACTORS.RDS"))
# R options
options(warn = -1); options(scipen = 999); g <- gc(reset = T); rm(list = ls())
OSys <- Sys.info()[1]
OSysPath <- switch(OSys, "Linux" = "/mnt", "Windows" = "//dapadfs")
root     <- switch(OSys, "Linux" = "/mnt/workspace_cluster_9", "Windows" = "//dapadfs/Workspace_cluster_9")
suppressMessages(if(!require(tidyverse)){install.packages("tidyverse");library(tidyverse)}else{library(tidyverse)})
suppressMessages(if(!require(rgdal)){install.packages("rgdal");library(rgdal)}else{library(rgdal)})
suppressMessages(if(!require(sp)){install.packages("sp");library(sp)}else{library(sp)})
suppressMessages(if(!require(raster)){install.packages("raster");library(raster)}else{library(raster)})
suppressMessages(if(!require(ncdf4)){install.packages("ncdf4");library(ncdf4)}else{library(ncdf4)})
suppressMessages(if(!require(rasterVis)){install.packages("rasterVis");library(rasterVis)}else{library(rasterVis)})
suppressMessages(if(!require(htmlwidgets)){install.packages("htmlwidgets");library(htmlwidgets)}else{library(htmlwidgets)})
suppressMessages(if(!require(compiler)){install.packages("compiler");library(compiler)}else{library(compiler)})
suppressMessages(if(!require(leaflet)){install.packages("leaflet");library(leaflet)}else{library(leaflet)})
suppressMessages(if(!require(highcharter)){install.packages("highcharter");library(highcharter)}else{library(highcharter)})
suppressMessages(if(!require(plotly)){install.packages("plotly");library(plotly)}else{library(plotly)})
suppressMessages(if(!require(d3heatmap)){install.packages("d3heatmap");library(d3heatmap)}else{library(d3heatmap)})
suppressMessages(if(!require(cluster)){install.packages("cluster");library(cluster)}else{library(cluster)})
suppressMessages(if(!require(FactoMineR)){install.packages("FactoMineR");library(FactoMineR)}else{library(FactoMineR)})
suppressMessages(if(!require(factoextra)){install.packages("factoextra");library(factoextra)}else{library(factoextra)})
suppressMessages(if(!require(gtools)){install.packages("gtools");library(gtools)}else{library(gtools)})
suppressMessages(if(!require(googlesheets)){install.packages("googlesheets");library(googlesheets)}else{library(googlesheets)})
suppressMessages(if(!require(corrplot)){install.packages("corrplot");library(corrplot)}else{library(corrplot)})
humanFactors <- readRDS(paste0(root, "/gap_analysis_landraces/Input_data/_occurrence_data/_ciat_data/Bean/BEAN-GRP-COORDINATES-HUMAN-FACTORS.RDS"))
names(humanFactors)
colnames(humanFactors)[10:ncol(humanFactors)]
colnames(humanFactors)[10:ncol(humanFactors)] <- c("dist_toGP1", "dist_h_set", "dist_rivers")
names(humanFactors)
saveRDS(object = humanFactors, file = paste0(root, "/gap_analysis_landraces/Input_data/_occurrence_data/_ciat_data/Bean/BEAN-GRP-COORDINATES-HUMAN-FACTORS.RDS"))
df <- readRDS("//dapadfs/Workspace_cluster_9/gap_analysis_landraces/Input_data/_occurrence_data/_ciat_data/Bean/BEAN-GRP-COORDINATES-CLIMATE-HUMAN-FACTORS.RDS")
names(df)
colnames(df)[100:102]
colnames(df)[100:102] <- c("dist_toGP1", "dist_h_set", "dist_rivers")
names(df)
saveRDS(object = df, file = paste0(root, "/gap_analysis_landraces/Input_data/_occurrence_data/_ciat_data/Bean/BEAN-GRP-COORDINATES-CLIMATE-HUMAN-FACTORS.RDS"))
raster_dir <- "//dapadfs/Workspace_cluster_9/gap_analysis_landraces/Input_data/raster_sdm/2_5m"
?extract
saveRDS(all, "//dapadfs/Workspace_cluster_9/gap_analysis_landraces/Input_data/_occurrence_data/_GBIF_data_2017_11_27/AMERICAS/DATA_CLEANED_GBIF_YEAR2000_CLIMATE-SOCIOECONOMIC.RDS")
saveRDS(object = all, file = "//dapadfs/Workspace_cluster_9/gap_analysis_landraces/Input_data/_occurrence_data/_GBIF_data_2017_11_27/AMERICAS/DATA_CLEANED_GBIF_YEAR2000_CLIMATE-SOCIOECONOMIC.RDS")
View(df)
saveRDS(object = df, file = paste0(root, "/gap_analysis_landraces/Input_data/_occurrence_data/_ciat_data/Bean/BEAN-GRP-COORDINATES-CLIMATE-HUMAN-FACTORS.RDS"))
genepool_na <- readRDS("//dapadfs/Workspace_cluster_9/gap_analysis_landraces/Results/_ocurrences_predicted/GENEBANKS_OCC_PREDICTED.RDS")
as.numeric(genepool_na$Genepool.prediction)
as.numeric(as.character(genepool_na$Genepool.prediction))
genepool_na$Genepool.prediction
class(genepool_na$Genepool.prediction)
genepool_na$Genepool.prediction <- factor(genepool_na$Genepool.prediction)
as.numeric(genepool_na$Genepool.prediction)
genepool_na$Genepool.prediction2 <- as.numeric(genepool_na$Genepool.prediction)
ggplot(data = df, aes(x = LONGITUDE, y = LATITUDE, fill = Genepool.prediction2)) +
geom_raster() +
coord_equal() +
theme_bw() +
scale_fill_discrete(name = name)
plot_func <- function(df, name) {
ggplot(data = df, aes(x = LONGITUDE, y = LATITUDE, fill = Genepool.prediction2)) +
geom_raster() +
coord_equal() +
theme_bw() +
scale_fill_discrete(name = name)
}
nested_tmp <- genepool_na %>%
group_by(SOURCE) %>%
nest() %>%
mutate(plots = map2(data, SOURCE, plot_func))
gridExtra::grid.arrange(grobs = nested_tmp$plots)
plot_func <- function(df, name) {
ggplot(data = df, aes(x = LONGITUDE, y = LATITUDE, fill = Genepool.prediction2)) +
geom_raster() +
coord_equal() +
theme_bw() +
scale_fill_continuous(name = name)
}
nested_tmp <- genepool_na %>%
group_by(SOURCE) %>%
nest() %>%
mutate(plots = map2(data, SOURCE, plot_func))
gridExtra::grid.arrange(grobs = nested_tmp$plots)
plot(genepool_na$LONGITUDE, genepool_na$LATITUDE, color = genepool_na$Genepool.prediction2)
plot(genepool_na$LONGITUDE, genepool_na$LATITUDE, col = genepool_na$Genepool.prediction2)
plot(genepool_na$LONGITUDE[genepool_na$SOURCE == "GBIF"], genepool_na$LATITUDE[genepool_na$SOURCE == "GBIF"], col = genepool_na$Genepool.prediction2)
table(genepool_na$SOURCE)
plot(genepool_na$LONGITUDE[genepool_na$SOURCE == "CIAT"], genepool_na$LATITUDE[genepool_na$SOURCE == "CIAT"], col = genepool_na$Genepool.prediction2)
plot(genepool_na$LONGITUDE[genepool_na$SOURCE == "USDA"], genepool_na$LATITUDE[genepool_na$SOURCE == "USDA"], col = genepool_na$Genepool.prediction2)
america <- rgdal::readOGR(dsn = "//dapadfs/Workspace_cluster_9/gap_analysis_landraces/Input_data/_maps/_shp_americas", "AMERICAS")
plot(america)
plot(genepool_na$LONGITUDE, genepool_na$LATITUDE,
xlab = "Longitude", ylab = "Latitude", main = "All sources"
col = genepool_na$Genepool.prediction2)
plot(genepool_na$LONGITUDE, genepool_na$LATITUDE,
xlab = "Longitude", ylab = "Latitude", main = "All sources",
col = genepool_na$Genepool.prediction2)
plot(genepool_na$LONGITUDE[genepool_na$SOURCE == "GBIF"], genepool_na$LATITUDE[genepool_na$SOURCE == "GBIF"],
xlab = "Longitude", ylab = "Latitude", main = "GBIF",
col = genepool_na$Genepool.prediction2)
plot(genepool_na$LONGITUDE[genepool_na$SOURCE == "CIAT"], genepool_na$LATITUDE[genepool_na$SOURCE == "CIAT"],
xlab = "Longitude", ylab = "Latitude", main = "CIAT",
col = genepool_na$Genepool.prediction2)
plot(genepool_na$LONGITUDE[genepool_na$SOURCE == "USDA"], genepool_na$LATITUDE[genepool_na$SOURCE == "USDA"],
xlab = "Longitude", ylab = "Latitude", main = "USDA",
col = genepool_na$Genepool.prediction2)
par(mfrow = c(2, 2))
plot(genepool_na$LONGITUDE, genepool_na$LATITUDE,
xlab = "Longitude", ylab = "Latitude", main = "All sources",
col = genepool_na$Genepool.prediction2)
plot(genepool_na$LONGITUDE[genepool_na$SOURCE == "GBIF"], genepool_na$LATITUDE[genepool_na$SOURCE == "GBIF"],
xlab = "Longitude", ylab = "Latitude", main = "GBIF",
col = genepool_na$Genepool.prediction2)
plot(genepool_na$LONGITUDE[genepool_na$SOURCE == "CIAT"], genepool_na$LATITUDE[genepool_na$SOURCE == "CIAT"],
xlab = "Longitude", ylab = "Latitude", main = "CIAT",
col = genepool_na$Genepool.prediction2)
plot(genepool_na$LONGITUDE[genepool_na$SOURCE == "USDA"], genepool_na$LATITUDE[genepool_na$SOURCE == "USDA"],
xlab = "Longitude", ylab = "Latitude", main = "USDA",
col = genepool_na$Genepool.prediction2)
plot(genepool_na$LONGITUDE, genepool_na$LATITUDE,
xlab = "Longitude", ylab = "Latitude", main = "All sources",
xlim = c(-45, 60), ylim = c(-130, -30),
col = genepool_na$Genepool.prediction2)
plot(genepool_na$LONGITUDE, genepool_na$LATITUDE,
xlab = "Longitude", ylab = "Latitude", main = "All sources",
xlim = c(-130, -30), ylim = c(-45, 60),
col = genepool_na$Genepool.prediction2)
par(mfrow = c(2, 2))
plot(genepool_na$LONGITUDE, genepool_na$LATITUDE,
xlab = "Longitude", ylab = "Latitude", main = "All sources",
xlim = c(-130, -30), ylim = c(-45, 60),
col = genepool_na$Genepool.prediction2)
plot(genepool_na$LONGITUDE[genepool_na$SOURCE == "GBIF"], genepool_na$LATITUDE[genepool_na$SOURCE == "GBIF"],
xlab = "Longitude", ylab = "Latitude", main = "GBIF",
xlim = c(-130, -30), ylim = c(-45, 60),
col = genepool_na$Genepool.prediction2)
plot(genepool_na$LONGITUDE[genepool_na$SOURCE == "CIAT"], genepool_na$LATITUDE[genepool_na$SOURCE == "CIAT"],
xlab = "Longitude", ylab = "Latitude", main = "CIAT",
xlim = c(-130, -30), ylim = c(-45, 60),
col = genepool_na$Genepool.prediction2)
plot(genepool_na$LONGITUDE[genepool_na$SOURCE == "USDA"], genepool_na$LATITUDE[genepool_na$SOURCE == "USDA"],
xlab = "Longitude", ylab = "Latitude", main = "USDA",
xlim = c(-130, -30), ylim = c(-45, 60),
col = genepool_na$Genepool.prediction2)
genepool_na$Genepool.prediction
str(genepool_na)
genepool_na$Genepool.prediction2 <- as.numeric(genepool_na$Genepool.prediction)
plot_func <- function(df, name) {
ggplot(data = df, aes(x = LONGITUDE, y = LATITUDE, fill = Genepool.prediction2)) +
#geom_raster() +
geom_point()
coord_equal() +
theme_bw() +
scale_fill_continuous(name = name)
}
nested_tmp <- genepool_na %>%
group_by(SOURCE) %>%
nest() %>%
mutate(plots = map2(data, SOURCE, plot_func))
plot_func <- function(df, name) {
ggplot(data = df, aes(x = LONGITUDE, y = LATITUDE, fill = Genepool.prediction)) +
#geom_raster() +
geom_point()
coord_equal() +
theme_bw() +
scale_fill_discrete(name = name)
}
nested_tmp <- genepool_na %>%
group_by(SOURCE) %>%
nest() %>%
mutate(plots = map2(data, SOURCE, plot_func))
dat_wlrd <- map_data("world")
gg <-ggplot() +
geom_polygon(data = dat_wlrd, aes(x = long,y = lat,group = group), fill = "gray70", na.rm = T, show.legend = F) +
coord_fixed(1.3)+
geom_point(aes(x = LONGITUDE, y = LATITUDE, col = Genepool.prediction), size = 1.2, stroke = 1, data = genepool_na, show.legend = TRUE, shape = 17) +
coord_equal()
gg
dat_wlrd
table(dat_wlrd$region)
table(dat_wlrd$subregion)
table(dat_wlrd$group)
gg <-ggplot() +
geom_polygon(data = dat_wlrd, aes(x = long, y = lat, group = group), fill = "gray70", na.rm = T, show.legend = F) +
coord_fixed(1.3) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, col = Genepool.prediction), size = 1.2, stroke = 1, data = genepool_na, show.legend = TRUE, shape = 17) +
coord_equal() + xlim(-130, -30) + ylim(-45, 60)
gg
gg <-ggplot() +
geom_polygon(data = dat_wlrd, aes(x = long, y = lat, group = group), fill = "gray70", na.rm = T, show.legend = F) +
coord_fixed(1.3) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, col = Genepool.prediction), size = 1.2, stroke = 1, data = genepool_na, show.legend = TRUE, shape = 17) +
coord_equal() + xlim(-130, -30) + ylim(-60, 70)
gg
gg <-ggplot() +
geom_polygon(data = dat_wlrd, aes(x = long, y = lat, group = group), fill = "gray70", na.rm = T, show.legend = F) +
coord_fixed(1.3) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, col = Genepool.prediction), size = 1.2, stroke = 1, data = genepool_na, show.legend = TRUE, shape = 17) +
coord_equal() + xlim(-140, -30) + ylim(-60, 70)
gg
gg <-ggplot() +
geom_polygon(data = dat_wlrd, aes(x = long, y = lat, group = group), fill = "gray70", na.rm = T, show.legend = F) +
coord_fixed(1.3) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, col = Genepool.prediction), size = 1.2, stroke = 1, data = genepool_na, show.legend = TRUE, shape = 17) +
coord_equal() + xlim(-150, -30) + ylim(-60, 70)
gg
gg <-ggplot() +
geom_polygon(data = dat_wlrd, aes(x = long, y = lat, group = group), fill = "gray70", na.rm = T, show.legend = F) +
coord_fixed(1.3) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, col = Genepool.prediction), size = 1.2, stroke = 1, data = genepool_na, show.legend = TRUE, shape = 17) +
coord_equal() + xlim(-150, -30) + ylim(-60, 80)
gg
gg <-ggplot() +
geom_polygon(data = dat_wlrd, aes(x = long, y = lat, group = group), fill = "gray70", na.rm = T, show.legend = F) +
coord_fixed(1.3) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, col = Genepool.prediction), size = 1.2, stroke = 1, data = genepool_na[genepool_na$SOURCE == "GBIF"], show.legend = TRUE, shape = 17) +
coord_equal() + xlim(-150, -30) + ylim(-60, 80)
gg <-ggplot() +
geom_polygon(data = dat_wlrd, aes(x = long, y = lat, group = group), fill = "gray70", na.rm = T, show.legend = F) +
coord_fixed(1.3) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, col = Genepool.prediction), size = 1.2, stroke = 1, data = genepool_na[genepool_na$SOURCE == "GBIF",], show.legend = TRUE, shape = 17) +
coord_equal() + xlim(-150, -30) + ylim(-60, 80)
gg
# CIAT
gg <-ggplot() +
geom_polygon(data = dat_wlrd, aes(x = long, y = lat, group = group), fill = "gray70", na.rm = T, show.legend = F) +
coord_fixed(1.3) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, col = Genepool.prediction), size = 1.2, stroke = 1, data = genepool_na[genepool_na$SOURCE == "CIAT",], show.legend = TRUE, shape = 17) +
coord_equal() + xlim(-150, -30) + ylim(-60, 80)
gg
# USDA
gg <-ggplot() +
geom_polygon(data = dat_wlrd, aes(x = long, y = lat, group = group), fill = "gray70", na.rm = T, show.legend = F) +
coord_fixed(1.3) +
geom_point(aes(x = LONGITUDE, y = LATITUDE, col = Genepool.prediction), size = 1.2, stroke = 1, data = genepool_na[genepool_na$SOURCE == "USDA",], show.legend = TRUE, shape = 17) +
coord_equal() + xlim(-150, -30) + ylim(-60, 80)
gg
View(genepool_na)
View(readRDS("//dapadfs/Workspace_cluster_9/gap_analysis_landraces/Results/classification_analysis/genepool_predicted.RDS"))
View(readRDS("//dapadfs/Workspace_cluster_9/gap_analysis_landraces/Results/classification_analysis/genepool_predicted.RDS"))
names(genepool_na)
genepool_na$Genepool.prediction2 <- NULL
View(readRDS("//dapadfs/Workspace_cluster_9/gap_analysis_landraces/Results/classification_analysis/genepool_predicted.RDS"))
names(genepool_na)[53:54] <- C("Longitude", "Latitude")
colnames(genepool_na)[53:54]
colnames(genepool_na)[53:54] <- c("Longitude", "Latitude")
colnames(genepool_na)
saveRDS(genepool_na, "//dapadfs/Workspace_cluster_9/gap_analysis_landraces/Results/classification_analysis/genepool_predicted.RDS")
genepool_na_ciat <- genepool_na[genepool_na$SOURCE == "CIAT",]
saveRDS(, "//dapadfs/Workspace_cluster_9/gap_analysis_landraces/Results/classification_analysis/genepool_predicted_ciat.RDS")
saveRDS(genepool_na_ciat, "//dapadfs/Workspace_cluster_9/gap_analysis_landraces/Results/classification_analysis/genepool_predicted_ciat.RDS")
# R options
options(warn = -1); options(scipen = 999); g <- gc(reset = T); rm(list = ls())
OSys <- Sys.info()[1]
OSysPath <- switch(OSys, "Linux" = "/mnt", "Windows" = "//dapadfs")
root     <- switch(OSys, "Linux" = "/mnt/workspace_cluster_9", "Windows" = "//dapadfs/Workspace_cluster_9")
# Load packages
suppressMessages(if(!require(tidyverse)){install.packages("tidyverse");library(tidyverse)}else{library(tidyverse)})
suppressMessages(if(!require(rgdal)){install.packages("rgdal");library(rgdal)}else{library(rgdal)})
suppressMessages(if(!require(sp)){install.packages("sp");library(sp)}else{library(sp)})
suppressMessages(if(!require(raster)){install.packages("raster");library(raster)}else{library(raster)})
suppressMessages(if(!require(ncdf4)){install.packages("ncdf4");library(ncdf4)}else{library(ncdf4)})
suppressMessages(if(!require(rasterVis)){install.packages("rasterVis");library(rasterVis)}else{library(rasterVis)})
suppressMessages(if(!require(htmlwidgets)){install.packages("htmlwidgets");library(htmlwidgets)}else{library(htmlwidgets)})
suppressMessages(if(!require(compiler)){install.packages("compiler");library(compiler)}else{library(compiler)})
suppressMessages(if(!require(leaflet)){install.packages("leaflet");library(leaflet)}else{library(leaflet)})
suppressMessages(if(!require(highcharter)){install.packages("highcharter");library(highcharter)}else{library(highcharter)})
suppressMessages(if(!require(plotly)){install.packages("plotly");library(plotly)}else{library(plotly)})
suppressMessages(if(!require(d3heatmap)){install.packages("d3heatmap");library(d3heatmap)}else{library(d3heatmap)})
suppressMessages(if(!require(cluster)){install.packages("cluster");library(cluster)}else{library(cluster)})
suppressMessages(if(!require(FactoMineR)){install.packages("FactoMineR");library(FactoMineR)}else{library(FactoMineR)})
suppressMessages(if(!require(factoextra)){install.packages("factoextra");library(factoextra)}else{library(factoextra)})
suppressMessages(if(!require(gtools)){install.packages("gtools");library(gtools)}else{library(gtools)})
suppressMessages(if(!require(googlesheets)){install.packages("googlesheets");library(googlesheets)}else{library(googlesheets)})
suppressMessages(if(!require(corrplot)){install.packages("corrplot");library(corrplot)}else{library(corrplot)})
# Verify if extracted data exists
if(!file.exists(paste0(root, "/gap_analysis_landraces/Input_data/_occurrence_data/_GBIF_data_2017_11_27/AMERICAS/DATA_CLEANED_GBIF_YEAR2000_CLIMATE-SOCIOECONOMIC.RDS"))){
# Load data
occ_data <- read.csv(paste0(root, "/gap_analysis_landraces/Input_data/_occurrence_data/_GBIF_data_2017_11_27/AMERICAS/DATA_CLEANED_GBIF_YEAR2000.csv"))
# Extract data from spatial sources
rDir <- paste0(root, "/gap_analysis_landraces/Input_data/raster_sdm/2_5m")
rStack <- raster::stack(list.files(path = rDir, full.names = T, pattern = "*.tif$"))
rData  <- raster::extract(x = rStack, y = occ_data[,c("LONGITUDE", "LATITUDE")])
occ_data <- cbind(occ_data, rData); rm(rDir, rStack, rData)
saveRDS(object = occ_data, file = paste0(root, "/gap_analysis_landraces/Input_data/_occurrence_data/_GBIF_data_2017_11_27/AMERICAS/DATA_CLEANED_GBIF_YEAR2000_CLIMATE-SOCIOECONOMIC.RDS"))
} else {
genepool_na <- readRDS(paste0(root, "/gap_analysis_landraces/Input_data/_occurrence_data/_GBIF_data_2017_11_27/AMERICAS/DATA_CLEANED_GBIF_YEAR2000_CLIMATE-SOCIOECONOMIC.RDS"))
}
# Counts
table(genepool_na$SOURCE)
table(genepool_na$SOURCE[which(duplicated(genepool_na$ID))])
sum(duplicated(genepool_na$ID))
dim(genepool_na[!duplicated(genepool_na$ID),])
genepool_na <- genepool_na[!duplicated(genepool_na$ID),] # Deleting duplicated records:
dim(genepool_na)
dim(genepool_na[complete.cases(genepool_na),])
xx <- genepool_na[complete.cases(genepool_na),]
table(xx$SOURCE)
names(xx)
genepool_na %>% dplyr::select(ID, LONGITUDE, LATITUDE, SOURCE, Accessibility:embergerQ, growingDegDays0:Yield) %>% complete.cases(.) %>% which(.)
genepool_na %>% dplyr::select(ID, LONGITUDE, LATITUDE, SOURCE, Accessibility:embergerQ, growingDegDays0:Yield) %>% complete.cases(.) %>% which(.) %>% length
names(dplyr::select(ID, LONGITUDE, LATITUDE, SOURCE, Accessibility:embergerQ, growingDegDays0:Yield))
names(genepool_na)
genepool_na <- genepool_na %>% dplyr::select(ID, LONGITUDE, LATITUDE, SOURCE, Accessibility:embergerQ, growingDegDays0:Yield)
hist(dplyr::select(ID, LONGITUDE, LATITUDE, SOURCE, Accessibility:embergerQ, growingDegDays0:Yield) %>% complete.cases(.) %>% which(.))
hist(genepool_na %>% dplyr::select(ID, LONGITUDE, LATITUDE, SOURCE, Accessibility:embergerQ, growingDegDays0:Yield) %>% complete.cases(.) %>% which(.))
hist(genepool_na %>% complete.cases(.) %>% which(.))
genepool_na %>% complete.cases(.)
genepool_na <- readRDS(paste0(root, "/gap_analysis_landraces/Input_data/_occurrence_data/_GBIF_data_2017_11_27/AMERICAS/DATA_CLEANED_GBIF_YEAR2000_CLIMATE-SOCIOECONOMIC.RDS"))
genepool_na <- genepool_na %>% dplyr::select(ID, LONGITUDE, LATITUDE, SOURCE, Accessibility:embergerQ, growingDegDays0:Yield)
# Counts
table(genepool_na$SOURCE) # Counts by source
sum(duplicated(genepool_na$ID)) # Number of duplicated records
table(genepool_na$SOURCE[which(duplicated(genepool_na$ID))]) # Number of duplicated records by source
genepool_na <- genepool_na[!duplicated(genepool_na$ID),] # Deleting duplicated records: 33209
dim(genepool_na)
genepool_na <- genepool_na[complete.cases(genepool_na),] # Deleting records with missing data:
genepool_na <- genepool_na[complete.cases(genepool_na),] # Deleting records with missing data:
dim(genepool_na)
dim(genepool_na)
# Counts
table(genepool_na$SOURCE) # Counts by source
# Load data
occ_data <- read.csv(paste0(root, "/gap_analysis_landraces/Input_data/_occurrence_data/_GBIF_data_2017_11_27/AMERICAS/DATA_CLEANED_GBIF_YEAR2000.csv"))
genepool_na <- readRDS(paste0(root, "/gap_analysis_landraces/Input_data/_occurrence_data/_GBIF_data_2017_11_27/AMERICAS/DATA_CLEANED_GBIF_YEAR2000_CLIMATE-SOCIOECONOMIC.RDS"))
View(genepool_na)
# Counts
table(genepool_na$SOURCE) # Counts by source
sum(duplicated(genepool_na$ID)) # Number of duplicated records
table(genepool_na$SOURCE[which(duplicated(genepool_na$ID))]) # Number of duplicated records by source
genepool_na <- genepool_na[!duplicated(genepool_na$ID),] # Deleting duplicated records: 33209
xx <- genepool_na[complete.cases(genepool_na),]
table(genepool_na$ID)
table(genepool_na$SOURCE)
table(xx$SOURCE)
names(genepool_na)
genepool_na <- genepool_na %>% dplyr::select(ID, LONGITUDE, LATITUDE, SOURCE, Accessibility:embergerQ, growingDegDays0:Yield)
genepool_na <- readRDS(paste0(root, "/gap_analysis_landraces/Input_data/_occurrence_data/_GBIF_data_2017_11_27/AMERICAS/DATA_CLEANED_GBIF_YEAR2000_CLIMATE-SOCIOECONOMIC.RDS"))
genepool_na <- genepool_na %>% dplyr::select(ID, LONGITUDE, LATITUDE, SOURCE, Accessibility:embergerQ, growingDegDays0:Yield)
genepool_na <- genepool_na[!duplicated(genepool_na$ID),] # Deleting duplicated records: 33209
genepool_na <- genepool_na[complete.cases(genepool_na),] # Deleting records with missing data: 32656
dim(genepool_na)
table(genepool_na$SOURCE)
genepool_na <- readRDS(paste0(root, "/gap_analysis_landraces/Input_data/_occurrence_data/_GBIF_data_2017_11_27/AMERICAS/DATA_CLEANED_GBIF_YEAR2000_CLIMATE-SOCIOECONOMIC.RDS"))
names(genepool_na)
genepool_na <- readRDS(paste0(root, "/gap_analysis_landraces/Input_data/_occurrence_data/_GBIF_data_2017_11_27/AMERICAS/DATA_CLEANED_GBIF_YEAR2000_CLIMATE-SOCIOECONOMIC.RDS"))
genepool_na <- genepool_na %>% dplyr::select(ID, LONGITUDE, LATITUDE, SOURCE, Accessibility:embergerQ, growingDegDays0:Yield)
genepool_na <- genepool_na[!duplicated(genepool_na$ID),] # Deleting duplicated records: 33209
genepool_na <- genepool_na[complete.cases(genepool_na),] # Deleting records with missing data: 32656
rownames(genepool_na) <- genepool_na$ID
names(genepool_na)
library(sdm)
test <- readRDS("//dapadfs/Workspace_cluster_9/gap_analysis_landraces/Results/classification_analysis/genepool_predicted.RDS")
occ_data <- read.csv(paste0(root, "/gap_analysis_landraces/Input_data/_occurrence_data/_GBIF_data_2017_11_27/AMERICAS/DATA_CLEANED_GBIF_YEAR2000.csv"))
solo_ciat <- readRDS("//dapadfs/Workspace_cluster_9/gap_analysis_landraces/Results/classification_analysis/genepool_predicted_ciat_original.RDS")
setdiff(solo_ciat$ID, occ_data$ID[occ_data$SOURCE == "CIAT"])
setdiff(occ_data$ID[occ_data$SOURCE == "CIAT"], solo_ciat$ID)
length(setdiff(occ_data$ID[occ_data$SOURCE == "CIAT"], solo_ciat$ID))
length(occ_data$ID[occ_data$SOURCE == "CIAT"]); length(solo_ciat$ID))
length(occ_data$ID[occ_data$SOURCE == "CIAT"]); length(solo_ciat$ID)
setdiff(solo_ciat$ID, occ_data$ID[occ_data$SOURCE == "CIAT"])
dim(solo_ciat)
View(solo_ciat)
View(solo_ciat)
test2 <- readRDS("//dapadfs/Workspace_cluster_9/gap_analysis_landraces/Results/classification_analysis/genepool_predicted_ciat.RDS")
plot(test2$Longitude, test2$Latitude)
solo_ciat <- readRDS("//dapadfs/Workspace_cluster_9/gap_analysis_landraces/Results/classification_analysis/genepool_predicted_ciat_original.RDS")
plot(solo_ciat$Longitude, solo_ciat$Latitude)
occ_data <- read.csv(paste0(root, "/gap_analysis_landraces/Input_data/_occurrence_data/_GBIF_data_2017_11_27/AMERICAS/DATA_CLEANED_GBIF_YEAR2000.csv"))
plot(occ_data$Longitude, occ_data$Latitude)
# Load data
occ_data <- read.csv(paste0(root, "/gap_analysis_landraces/Input_data/_occurrence_data/_GBIF_data_2017_11_27/AMERICAS/DATA_CLEANED_GBIF_YEAR2000.csv"))
genepool_na <- readRDS(paste0(root, "/gap_analysis_landraces/Input_data/_occurrence_data/_GBIF_data_2017_11_27/AMERICAS/DATA_CLEANED_GBIF_YEAR2000_CLIMATE-SOCIOECONOMIC.RDS"))
names(genepool_na)
plot(genepool_na$LONGITUDE, genepool_na$LATITUDE)
genepool_na <- readRDS(paste0(root, "/gap_analysis_landraces/Input_data/_occurrence_data/_GBIF_data_2017_11_27/AMERICAS/DATA_CLEANED_GBIF_YEAR2000_CLIMATE-SOCIOECONOMIC.RDS"))
genepool_na <- genepool_na %>% dplyr::select(ID, LONGITUDE, LATITUDE, SOURCE, Accessibility:embergerQ, growingDegDays0:Yield)
genepool_na <- genepool_na[!duplicated(genepool_na$ID),] # Deleting duplicated records: 33209
genepool_na <- genepool_na[complete.cases(genepool_na),] # Deleting records with missing data: 32656
rownames(genepool_na) <- genepool_na$ID
names(genepool_na)
genepool_na <- genepool_na %>% dplyr::select(5:ncol(genepool_na))
names(genepool_na)
names(genepool_na2)
names(genepool_na2)
saveRDS(object = genepool_na2, file = "//dapadfs/Workspace_cluster_9/gap_analysis_landraces/Results/_ocurrences_predicted/GENEBANKS_OCC_PREDICTED.RDS")
# R options
options(warn = -1); options(scipen = 999); g <- gc(reset = T); rm(list = ls())
OSys <- Sys.info()[1]
OSysPath <- switch(OSys, "Linux" = "/mnt", "Windows" = "//dapadfs")
root     <- switch(OSys, "Linux" = "/mnt/workspace_cluster_9", "Windows" = "//dapadfs/Workspace_cluster_9")
suppressMessages(if(!require(tidyverse)){install.packages("tidyverse");library(tidyverse)}else{library(tidyverse)})
suppressMessages(if(!require(rgdal)){install.packages("rgdal");library(rgdal)}else{library(rgdal)})
suppressMessages(if(!require(sp)){install.packages("sp");library(sp)}else{library(sp)})
suppressMessages(if(!require(raster)){install.packages("raster");library(raster)}else{library(raster)})
suppressMessages(if(!require(ncdf4)){install.packages("ncdf4");library(ncdf4)}else{library(ncdf4)})
suppressMessages(if(!require(rasterVis)){install.packages("rasterVis");library(rasterVis)}else{library(rasterVis)})
suppressMessages(if(!require(htmlwidgets)){install.packages("htmlwidgets");library(htmlwidgets)}else{library(htmlwidgets)})
suppressMessages(if(!require(compiler)){install.packages("compiler");library(compiler)}else{library(compiler)})
suppressMessages(if(!require(leaflet)){install.packages("leaflet");library(leaflet)}else{library(leaflet)})
suppressMessages(if(!require(highcharter)){install.packages("highcharter");library(highcharter)}else{library(highcharter)})
suppressMessages(if(!require(plotly)){install.packages("plotly");library(plotly)}else{library(plotly)})
suppressMessages(if(!require(d3heatmap)){install.packages("d3heatmap");library(d3heatmap)}else{library(d3heatmap)})
suppressMessages(if(!require(cluster)){install.packages("cluster");library(cluster)}else{library(cluster)})
suppressMessages(if(!require(FactoMineR)){install.packages("FactoMineR");library(FactoMineR)}else{library(FactoMineR)})
suppressMessages(if(!require(factoextra)){install.packages("factoextra");library(factoextra)}else{library(factoextra)})
suppressMessages(if(!require(gtools)){install.packages("gtools");library(gtools)}else{library(gtools)})
suppressMessages(if(!require(googlesheets)){install.packages("googlesheets");library(googlesheets)}else{library(googlesheets)})
suppressMessages(if(!require(corrplot)){install.packages("corrplot");library(corrplot)}else{library(corrplot)})
file.exists(paste0(root, "/gap_analysis_landraces/Input_data/_occurrence_data/_GBIF_data_2017_11_27/AMERICAS/DATA_CLEANED_GBIF_YEAR2000_CLIMATE-SOCIOECONOMIC.RDS"))

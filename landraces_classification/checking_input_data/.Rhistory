suppressMessages(library(highcharter))
suppressMessages(library(plotly))
suppressMessages(library(d3heatmap))
suppressMessages(library(cluster))
suppressMessages(library(factoextra))
suppressMessages(library(gtools))
suppressMessages(library(googlesheets))
ciat <- gs_ls("Bean_landrace_name_table")
ciat <- gs_title("Bean_landrace_name_table")
ciat %>% gs_browse(ws = "Pvulgaris_CIATdb")
ciat <- ciat %>% gs_read(ws = "Pvulgaris_CIATdb")
nrow(ciat) # 37987 (old and original), 23831 (new one with vernacular names)
names(ciat) <- c("ID", "Source", "Cleaned.by", "Accession.number", "Synonyms", "Common.names",
"Interpreted.name", "Test", "Vernacular.name",
"Genepool", "Race.interpreted", "Race", "Subgroup",
"Reference", "Genus", "Species", "Subspecies", "Variety",
"Biological.status", "Material.type", "CORE.collection",
"Country", "Department", "County", "Place", "Altitude", "Latitude", "Longitude",
"Lat.geo", "Lon.geo", "Coord.status", "Collection.date",
"Name", "Name.2", "Institution", "Country.3", "Receipt.date",
"Growth.habit", "Seed.color", "Seed.shape", "Seed.brightness", "Seed.weight",
"Protein", "Genepool.weight", "Genepool.protein", "Race.protein", "Responsible.11")
ciat <- ciat %>% filter(Coord.status != "No coords") # 16038
ciat$Latitude[which(!is.na(ciat$Lat.geo) & is.na(ciat$Latitude))] <- ciat$Lat.geo[which(!is.na(ciat$Lat.geo) & is.na(ciat$Latitude))]
ciat$Longitude[which(!is.na(ciat$Lon.geo) & is.na(ciat$Longitude))] <- ciat$Lon.geo[which(!is.na(ciat$Lon.geo) & is.na(ciat$Longitude))]
which(!is.na(ciat$Latitude) & is.na(ciat$Altitude)) %>% length
ciat %>% dplyr::filter(!is.na(Latitude) & is.na(Altitude)) %>% dplyr::select(Longitude, Latitude) %>% head
srtm <- raster::raster(paste0(OSysPath, "/data_cluster_4/observed/gridded_products/srtm/Altitude_30s/alt"))
srtm.vals <- raster::extract(x = srtm,
y = ciat %>% dplyr::filter(!is.na(Latitude) & is.na(Altitude)) %>% dplyr::select(Longitude, Latitude))
ciat$Altitude[which(!is.na(ciat$Latitude) & is.na(ciat$Altitude))] <- srtm.vals
rm(srtm.vals, srtm)
ciat <- ciat %>% filter(Altitude <= 3500)
ciat %>% select(ID, Longitude, Latitude) %>% head
coord_df <- ciat %>% select(ID, Longitude, Latitude)
length((unique(coord_df$ID)))
rm(Osys)
rm(OSys)
OSysPath
paste0(root, "/gap_analysis_landraces/Input_data/_maps/_envirem2_5")
envirem <- raster::stack(paste0(root, "/gap_analysis_landraces/Input_data/_maps/_envirem2_5"))
envirem <- raster(paste0(root, "/gap_analysis_landraces/Input_data/_maps/_envirem2_5"))
envirem <- raster::brick(paste0(root, "/gap_analysis_landraces/Input_data/_maps/_envirem2_5"))
envirem <- raster::brick(list.files(path = paste0(root, "/gap_analysis_landraces/Input_data/_maps/_envirem2_5"), full.names = T))
list.files(path = paste0(root, "/gap_analysis_landraces/Input_data/_maps/_envirem2_5"), full.names = T)
envirem <- list.files(path = paste0(root, "/gap_analysis_landraces/Input_data/_maps/_envirem2_5"), full.names = T)
envirem <- list.files(path = paste0(root, "/gap_analysis_landraces/Input_data/_maps/_envirem2_5"), full.names = T)
envirem <- envirem[grep(pattern = "*.tif$", x = envirem)]
envirem <- raster::stack(envirem)
bioVars <- list.files(paste0(OSysPath, "/data_cluster_4/observed/gridded_products/worldclim/Global_30s_v2"), full.names = T)
bioVars <- bioVars[grep(pattern = "bio", x = bioVars)]
bioVars <- bioVars[grep(pattern = "tif", x = bioVars)] %>% mixedsort
bioVars <- raster::stack(bioVars)
bioVars
bioVars <- list.files(paste0(OSysPath, "/data_cluster_4/observed/gridded_products/worldclim/Global_30s_v2"), full.names = T)
bioVars <- bioVars[grep(pattern = "bio", x = bioVars)]
bioVars <- bioVars[grep(pattern = "*.tif$", x = bioVars)] %>% mixedsort
bioVars <- raster::stack(bioVars)
envirem <- list.files(path = paste0(root, "/gap_analysis_landraces/Input_data/_maps/_envirem2_5"), full.names = T)
envirem <- envirem[grep(pattern = "*.tif$", x = envirem)]
envirem <- list.files(path = paste0(root, "/gap_analysis_landraces/Input_data/_maps/_envirem2_5"), full.names = T)
envirem <- envirem[grep(pattern = "*.tif$", x = envirem)]
envirem <- raster::stack(envirem)
bioVars <- list.files(paste0(OSysPath, "/data_cluster_4/observed/gridded_products/worldclim/Global_30s_v2"), full.names = T)
bioVars <- bioVars[grep(pattern = "bio", x = bioVars)]
bioVars <- bioVars[grep(pattern = "*.tif$", x = bioVars)] %>% mixedsort
bioVars <- raster::stack(bioVars)
envirem
bioVars
envirem
bioVars
coord_envirem <- raster::extract(x = envirem, y = coord_df[,c("Longitude", "Latitude")])
coord_bioVars <- raster::extract(x = bioVars, y = coord_df[,c("Longitude", "Latitude")])
install.packages("odbc")
?
switch
clima <- readRDS("//dapadfs/Workspace_cluster_9/gap_analysis_landraces/Input_data/_occurrence_data/_ciat_data/Bean/BEAN-GRP-COORDINATES-CLIMATE.RDS")
View(clima)
plot(clima$Longitude, clima$Latitude, pch = 20)
library(tidyverse)
View(clima)
clima %>% ggplot(aes(x = Longitude, y = Latitude, colour = aridityIndexThornthwaite)) + geom_point()
library(corrplot)
corrplot(corr = cor(clima[,-1], method = "pearson"))
?cor
corrplot(corr = cor(clima[,-1], method = "pearson", use = "complete.obs"))
?corrplot
corrplot(corr = cor(clima[,-1], method = "pearson", use = "complete.obs"), order = "hclust", addrect = 2)
14434140869
setwd("E:/Buenas-1342/Iguales/P_abajo")
photos <- list.files(path = ".", full.names = T)
photos
install.packages("imager")
im <- imager::load.image(photos[1])
im
plot(im) #Parrots!
?resize
thmb <- imager::resize(im, 250, 250)
plot(thmb)
thmb
photos
raster::raster(thmb)
thmb
as.raster.cimg(thmb)
thmb[,,1]
setwd("E:/Buenas-1342/Iguales/P_abajo")
photos <- list.files(path = ".", full.names = T)
photos <- photos[grep(pattern = "*.png$", x = photos)]
photos
x = photos[[1]]
x
img <- imager::load.image(x)
img <- imager::resize(img, 250, 250)
plot(img)
r <- raster::raster(img[,,1]) # Red
g <- raster::raster(img[,,2]) # Green
b <- raster::raster(img[,,3]) # Blue
img_r <- raster::brick(r, g, b)
plot(img_r)
img_r
ggRGB(img_r, 1, 2, 3)
library(jpeg)
library(raster)
library(RStoolbox)
library(gridExtra)
ggRGB(img_r, 1, 2, 3)
photos_raster <- lapply(photos, function(x){
# img <- jpeg::readJPEG(source = x, native = F)
img <- imager::load.image(x)
img <- imager::resize(img, 250, 250)
r <- raster::raster(img[,,1]) # Red
g <- raster::raster(img[,,2]) # Green
b <- raster::raster(img[,,3]) # Blue
img_r <- raster::brick(r, g, b)
return(img_r)
})
photos_raster
photos_raster[[1]]
photos_raster[[1]][2]
photos_raster[[1]][[2]]
photos_raster <- lapply(photos, function(x){
# img <- jpeg::readJPEG(source = x, native = F)
img <- imager::load.image(x)
img <- imager::resize(img, 250, 250)
r <- raster::raster(img[,,1]) # Red
g <- raster::raster(img[,,2]) # Green
b <- raster::raster(img[,,3]) # Blue
img_r <- raster::brick(r, g, b)
names(img_r) <- c("r", "g", "b")
return(img_r)
})
gris <- photos_raster[[1]]$r - photos_raster[[1]]$b
plot(gris)
gray_rasters <- lapply(photos_raster, function(x){
grayScale <- x$r - x$b
return(grayScale)
})
gray_rasters
gray_rasters <- raster::brick(gray_rasters)
rpc <- RStoolbox::rasterPCA(gray_rasters)
ggRGB(rpc$map, 1, 2, 3, stretch = "lin", q = 0)
if(require(gridExtra)){
plots <- lapply(1:3, function(x) ggR(rpc$map, x, geom_raster = TRUE))
grid.arrange(plots[[1]], plots[[2]], plots[[3]], ncol = 2)
}
setwd("E:/Buenas-1342/Iguales/P_abajo")
photos <- list.files(path = ".", full.names = T)
photos <- photos[grep(pattern = "*.png$", x = photos)]
photos_raster <- lapply(photos, function(x){
# img <- jpeg::readJPEG(source = x, native = F)
img <- imager::load.image(x)
img <- imager::resize(img, 250, 250)
r <- raster::raster(img[,,1]) # Red
g <- raster::raster(img[,,2]) # Green
b <- raster::raster(img[,,3]) # Blue
img_r <- raster::brick(r, g, b)
names(img_r) <- c("r", "g", "b")
return(img_r)
})
# ggRGB(img_r, 1, 2, 3)
# rpc <- RStoolbox::rasterPCA(img_r)
gray_rasters <- lapply(photos_raster, function(x){
grayScale <- x$r - x$b
return(grayScale)
})
gray_rasters <- raster::brick(gray_rasters)
rpc <- RStoolbox::rasterPCA(gray_rasters)
ggRGB(rpc$map, 1, 2, 3, stretch = "lin", q = 0)
if(require(gridExtra)){
plots <- lapply(1:3, function(x) ggR(rpc$map, x, geom_raster = TRUE))
grid.arrange(plots[[1]], plots[[2]], plots[[3]], ncol = 2)
}
library("aqp", lib.loc="~/R/win-library/3.4")
profvis::profvis({ciat <- gs_ls("Bean_landrace_name_table")
ciat <- gs_title("Bean_landrace_name_table")
ciat %>% gs_browse(ws = "Pvulgaris_CIATdb")
ciat <- ciat %>% gs_read(ws = "Pvulgaris_CIATdb")
nrow(ciat) # 37987 (old and original), 23831 (new one with vernacular names)})
library(readxl)
library(lubridate)
yday(as.Date("2016-12-18"))
yday(as.Date("2016-12-10"))
yday(as.Date("2016-11-08"))
yday(as.Date("2016-09-29"))
yday(as.Date("2016-08-20"))
yday(as.Date("2016-08-28"))
install.packages("lavaan")
library(lavaan)
HS.model <- ' visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9 '
fit <- cfa(HS.model, data=HolzingerSwineford1939)
summary(fit, fit.measures=TRUE)
as.data.frame(summary(fit, fit.measures=TRUE))
as.matrix(summary(fit, fit.measures=TRUE))
lavaanSumm <- summary(fit, fit.measures=TRUE)
lavaanSumm
summary(fit, fit.measures=TRUE)
summary(fit, fit.measures=TRUE)$Variances
library(broom)
tidy(summary(fit, fit.measures=TRUE))
broom::tidy(summary(fit, fit.measures=TRUE))
broom::augment(summary(fit, fit.measures=TRUE))
broom::glance(summary(fit, fit.measures=TRUE))
broom::tidy(summary(fit, fit.measures=TRUE))
str(summary(fit, fit.measures=TRUE))
summary(fit, fit.measures=TRUE)[[1]]
install.packages("stargazer")
library("stargazer")
stargazer(summary(fit, fit.measures=TRUE))
tidy(fit)
getExtraOutput(summary(fit, fit.measures=TRUE))
library(simsem)
install.packages(simsem)
install.packages("simsem")
library(simsem)
getExtraOutput(summary(fit, fit.measures=TRUE))
summary(fit, fit.measures=F)
summary(fit, fit.measures=T)
summary(fit, fit.measures=T)
signature(object = fit, type = "free")
signature(object = fit, type = "user")
parameterEstimates(fit)
summary(fit, fit.measures=T)
View(parameterEstimates(fit))
View(fitMeasures(fit))
fitMeasures(fit)
fitmeasures(fit.measures = )
fitmeasures(fit)
standardizedSolution(fit)
lavInspect(fit)
modificationIndices(fit)
yday(as.Date("2016-08-28"))
yday(as.Date("2016-09-05"))
devtools::install_github("rstudio/tfestimators")
library(tfestimators)
# return an input_fn for a given subset of data
mtcars_input_fn <- function(data) {
input_fn(data,
features = c("disp", "cyl"),
response = "mpg")
}
mtcars_input_fn()
cols <- feature_columns(
column_numeric("disp"),
column_numeric("cyl")
)
cols
cols <- feature_columns(
column_numeric("disp", "cyl")
)
model <- linear_regressor(feature_columns = cols)
models
model
options(warn = -1); options(scipen = 999); g <- gc(reset = T); rm(list = ls())
OSys <- Sys.info()[1]
OSysPath <- switch(OSys, "Linux" = "/mnt", "Windows" = "//dapadfs")
root     <- switch(OSys, "Linux" = "/mnt/workspace_cluster_9", "Windows" = "//dapadfs/Workspace_cluster_9")
# Load packages
suppressMessages(library(tidyverse))
suppressMessages(library(readxl))
suppressMessages(library(rgdal))
suppressMessages(library(sp))
suppressMessages(library(raster))
suppressMessages(library(ncdf4))
suppressMessages(library(rasterVis))
suppressMessages(library(htmlwidgets))
suppressMessages(library(compiler))
suppressMessages(library(leaflet))
suppressMessages(library(highcharter))
suppressMessages(library(plotly))
suppressMessages(library(d3heatmap))
suppressMessages(library(cluster))
suppressMessages(library(factoextra))
suppressMessages(library(gtools))
suppressMessages(library(googlesheets))
## =================================================================================================================== ##
## CIAT database
## =================================================================================================================== ##
# Load database from Google Drive
ciat <- gs_ls("Bean_landrace_name_table")
ciat <- gs_title("Bean_landrace_name_table")
ciat %>% gs_browse(ws = "Pvulgaris_CIATdb")
ciat <- ciat %>% gs_read(ws = "Pvulgaris_CIATdb")
nrow(ciat) # 37987 (old and original), 23831 (new one with vernacular names)
names(ciat)
names(ciat)
ciat <- ciat %>% filter(coord_status != "No coords") # 16038
max(ciat$`Altitude (masl)`, na.rm = T)
which.max(ciat$`Altitude (masl)`, na.rm = T)
which.max(ciat$`Altitude (masl)`)
ciat[14816,]
View(ciat[14816,])
max(ciat$`Altitude (masl)`, na.rm = T)
install.packages("PDC")
install.packages("PDC")
install.packages("PDC")
install.packages("TSclust")
library("TSclust", lib.loc="~/R/win-library/3.4")
## Create three sample time series
x <- cumsum(rnorm(100))
y <- cumsum(rnorm(100))
diss.DTWARP(x, y)
plot(x, ty = 'l')
par(mfrow = c(1,2)); plot(x, ty = 'l'); plot(y, ty = 'l')
par(mfrow = c(1,2)); plot(x, ty = 'l'); plot(x + 2*rnorm(100), ty = 'l')
y <- x + 2*rnorm(100)
diss.DTWARP(x, y)
indices <- readRDS("//dapadfs/Workspace_cluster_9/CWR_pre-breeding/Results/prec_indices_CACol.RDS")
View(indices)
idList <- unique(indices$Variable)
idList
idList <- unique(indices$Variable)
i=1
df <- indices magrittr::%>% dplyr::filter(Variable == idList[i])
library(tidyverse)
suppressMessages(library(tidyverse))
df <- indices %>% dplyr::filter(Variable == idList[i])
df$Variable <- NULL
head(df)
df %>% tidyr::spread(cellID, Value) %>% head
df %>% tidyr::spread(cellID, Value) %>% View
df %>% tidyr::spread(Year, Value) %>% View
df <- df %>% tidyr::spread(Year, Value)
View(df)
View(df)
paste0(idList[i], "-", names(df)[2:ncol(df)])
names(df)[2:ncol(df)] <- paste0(idList[i], "-", names(df)[2:ncol(df)])
View(df)
df <- indices %>% dplyr::filter(Variable == idList[i])
df$Variable <- NULL
df %>% ggplot(aes(x = Year, y = Value, group = cellID)) + geom_line()
df <- df %>% tidyr::spread(Year, Value)
names(df)[2:ncol(df)] <- paste0(idList[i], "-", names(df)[2:ncol(df)])
diss.DTWARP(x = df[1, -1], y = df[2, -1])
diss.DTWARP(x = df[, -1], y = df[2, -1])
diss.DTWARP(x = df[3, -1], y = df[2, -1])
diss.DTWARP(x = df[2, -1], y = df[2, -1])
dtwVal <- rep(NA, nrow(df))
for(i in 1:nrow(df)){
dtwVal[i] <- diss.DTWARP(x = df[i, -1], y = df[2, -1])
}
rm(i)
hist(dtwVal)
hist(dtwVal)
?TSclust::diss.DTWARP
dissMat <- matrix(data = NA, nrow = nrow(df), ncol = 14)
View(dissMat)
for(i in 1:nrow(df)){
dissMat[i, 1] <- TSclust::diss.EUCL(x = df[i, -1], y = df[2, -1])
dissMat[i, 2] <- TSclust::diss.DTWARP(x = df[i, -1], y = df[2, -1])
dissMat[i, 3] <- TSclust::diss.CDM(x = df[i, -1], y = df[2, -1], type = "min")
dissMat[i, 4] <- TSclust::diss.CID(x = df[i, -1], y = df[2, -1])
dissMat[i, 5] <- TSclust::diss.COR(x = df[i, -1], y = df[2, -1])
dissMat[i, 6] <- TSclust::diss.CORT(x = df[i, -1], y = df[2, -1], k = 2, deltamethod = "Euclid")
dissMat[i, 7] <- TSclust::diss.FRECHET(x = df[i, -1], y = df[2, -1])
dissMat[i, 8] <- TSclust::diss.INT.PER(x = df[i, -1], y = df[2, -1], normalize = TRUE)
dissMat[i, 9] <- TSclust::diss.NCD(x = df[i, -1], y = df[2, -1], type = "min")
dissMat[i, 10] <- TSclust::diss.PDC(x = df[i, -1], y = df[2, -1])
dissMat[i, 11] <- TSclust::diss.PER(x = df[i, -1], y = df[2, -1], logarithm=FALSE, normalize=FALSE)
dissMat[i, 12] <- TSclust::diss.SPEC.GLK(x = df[i, -1], y = df[2, -1], plot=FALSE)
dissMat[i, 13] <- TSclust::diss.SPEC.ISD(x = df[i, -1], y = df[2, -1], plot=FALSE)
dissMat[i, 14] <- TSclust::diss.SPEC.LLR(x = df[i, -1], y = df[2, -1], alpha=0.5, method="DLS", plot=FALSE)
}; rm(i)
dissMat <- matrix(data = NA, nrow = nrow(df), ncol = 14)
for(i in 1:nrow(df)){
dissMat[i, 1] <- TSclust::diss.EUCL(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]))
dissMat[i, 2] <- TSclust::diss.DTWARP(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]))
dissMat[i, 3] <- TSclust::diss.CDM(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]), type = "min")
dissMat[i, 4] <- TSclust::diss.CID(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]))
dissMat[i, 5] <- TSclust::diss.COR(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]))
dissMat[i, 6] <- TSclust::diss.CORT(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]), k = 2, deltamethod = "Euclid")
dissMat[i, 7] <- TSclust::diss.FRECHET(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]))
dissMat[i, 8] <- TSclust::diss.INT.PER(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]), normalize = TRUE)
dissMat[i, 9] <- TSclust::diss.NCD(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]), type = "min")
dissMat[i, 10] <- TSclust::diss.PDC(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]))
dissMat[i, 11] <- TSclust::diss.PER(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]), logarithm=FALSE, normalize=FALSE)
dissMat[i, 12] <- TSclust::diss.SPEC.GLK(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]), plot=FALSE)
dissMat[i, 13] <- TSclust::diss.SPEC.ISD(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]), plot=FALSE)
dissMat[i, 14] <- TSclust::diss.SPEC.LLR(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]), alpha=0.5, method="DLS", plot=FALSE)
}; rm(i)
View(dissMat)
dissMat <- matrix(data = NA, nrow = nrow(df), ncol = 14)
for(i in 1:nrow(df)){
dissMat[i, 1] <- TSclust::diss.EUCL(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]))
dissMat[i, 2] <- TSclust::diss.DTWARP(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]))
dissMat[i, 3] <- TSclust::diss.CDM(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]), type = "min")
dissMat[i, 4] <- TSclust::diss.CID(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]))
dissMat[i, 5] <- TSclust::diss.COR(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]))
dissMat[i, 6] <- TSclust::diss.CORT(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]), k = 2, deltamethod = "Euclid")
dissMat[i, 7] <- TSclust::diss.FRECHET(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]))
dissMat[i, 8] <- TSclust::diss.INT.PER(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]), normalize = TRUE)
dissMat[i, 9] <- TSclust::diss.NCD(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]), type = "min")
dissMat[i, 10] <- TSclust::diss.PDC(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]))
dissMat[i, 11] <- TSclust::diss.PER(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]), logarithm=FALSE, normalize=FALSE)
dissMat[i, 12] <- TSclust::diss.SPEC.GLK(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]), plot=FALSE)
dissMat[i, 13] <- TSclust::diss.SPEC.ISD(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]), plot=FALSE)
dissMat[i, 14] <- TSclust::diss.SPEC.LLR(x = as.numeric(df[i, -1]), y = as.numeric(df[2, -1]), alpha=0.5, method="DLS", plot=FALSE)
}; rm(i)
View(dissMat)
names(dissMat) <- c("Eucl", "DTWarp", "CDM", "CID", "COR", "CORT", "Frechet", "Int.Per", "NCD", "PDC", "PER", "Spec.GLK", "Spec.ISD", "Spec.LLR")
View(dissMat)
colnames(dissMat) <- c("Eucl", "DTWarp", "CDM", "CID", "COR", "CORT", "Frechet", "Int.Per", "NCD", "PDC", "PER", "Spec.GLK", "Spec.ISD", "Spec.LLR")
View(dissMat)
cor(dissMat)
hist(dissMat[,1])
TSclust::diss.EUCL(x = as.numeric(df[1, -1]), y = as.numeric(df[2, -1]))
TSclust::diss.EUCL(x = scale(as.numeric(df[1, -1])), y = scale(as.numeric(df[2, -1])))
TSclust::diss.EUCL(x = as.numeric(scale(df[1, -1])), y = (scale(as.numeric(df[2, -1])))
})
TSclust::diss.EUCL(x = as.numeric(scale(df[1, -1])), y = as.numeric(scale(df[2, -1])))
scale(df[1, -1])
TSclust::diss.EUCL(x = as.numeric((df[1, -1]-mean(df[1, -1]))/sd(df[1, -1])), y = as.numeric((df[2, -1]-mean(df[2, -1]))/sd(df[2, -1])))
df[1, -1]
df[1, -1]-mean(df[1, -1])
mean(df[1, -1])
(df[1, -1]-mean(as.numeric(df[1, -1])))
as.numeric((df[1, -1]-mean(as.numeric(df[1, -1])))/sd(as.numeric(df[1, -1])))
TSclust::diss.EUCL(x = as.numeric((df[1, -1]-mean(as.numeric(df[1, -1])))/sd(as.numeric(df[1, -1]))), y = as.numeric((df[2, -1]-mean(as.numeric(df[2, -1])))/sd(as.numeric(df[2, -1]))))
View(dissMat)
View(df)
dim(dissMat)
cor(dissMat[,-12])
dissMat <- dissMat[,-12]
FactoMineR::PCA(X = dissMat, scale.unit = T)
?diss.NCD
as.numeric(df[2, -1])
object.size(as.numeric(df[2, -1]))
View(df)
totrain_pca <- FactoMineR::PCA(X = df, scale.unit = T)
totrain_pca <- FactoMineR::PCA(X = df[,-1], scale.unit = T)
FactoMineR::HCPC(res = totrain_pca, nb.clust = -1)
totrain_pca_cluster <- FactoMineR::HCPC(res = totrain_pca, nb.clust = -1)
View(totrain_pca_cluster$data.clust)
map_template <- readRDS("//dapadfs/Workspace_cluster_9/CWR_pre-breeding/Input_data/AgMerra_template.RDS")
map_template[] <- NA
df$cellID
map_template[df$cellID] <- dissMat[,1]
plot(map_template)
plot(map_template, xlim = c(-130, -50), ylim = c(-10, 50))
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
map_template[df$cellID] <- dissMat[,2]
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
map_template[df$cellID] <- dissMat[,3]
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
map_template[df$cellID] <- dissMat[,4]
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
map_template[df$cellID] <- dissMat[,5]
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
map_template[df$cellID] <- dissMat[,1]
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
cluster_data <- totrain_pca_cluster$data.clust
cluster_data$cellID <- df$cellID
xyFromCell(object = map_template, cell = cluster_data$cellID[cluster_data$clust == 1])
points(xyFromCell(object = map_template, cell = cluster_data$cellID[cluster_data$clust == 1]), col=4, pch = 20, cex = .3)
map_template[df$cellID] <- dissMat[,1]
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
par(mfrow = c(1,2))
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
points(xyFromCell(object = map_template, cell = cluster_data$cellID[cluster_data$clust == 1]), col=4, pch = 20, cex = .3)
par(mfrow = c(1,2))
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
points(xyFromCell(object = map_template, cell = cluster_data$cellID[cluster_data$clust == 1]), col=4, pch = 20, cex = .3)
par(mfrow = c(1,2))
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
plot(map_template, xlim = c(-120, -50), ylim = c(-5, 40))
points(xyFromCell(object = map_template, cell = cluster_data$cellID[cluster_data$clust == 1]), col=4, pch = 20, cex = .3)
totrain_pca <- FactoMineR::PCA(X = df[,-1], scale.unit = T)
totrain_pca_cluster <- FactoMineR::HCPC(res = totrain_pca, nb.clust = -1)
library(tidyverse)
trainData <- read.csv('https://raw.githubusercontent.com/selva86/datasets/master/breastcancer_training.csv')
testData <- read.csv('https://raw.githubusercontent.com/selva86/datasets/master/breastcancer_test.csv')
library(tidyverse)
library(caret)
# 2. Build Logistic Model
logitmod <- glm(Class ~ Cl.thickness + Cell.size + Cell.shape, family = "binomial", data=trainData)
# 3. Predict on testData
pred <- predict(logitmod, newdata = testData, type = "response")
pred
# 4. If p > .5, then Class is 1 else 0
y_pred <- ifelse(pred > 0.5, 1, 0)
y_act <- testData$Class
mean(y_pred == y_act)  # 94%
library(caret)
caret::confusionMatrix(y_pred, y_act, positive="1", mode="everything")
install.packages("odbc")
30*4
install.packages()
install.packages("RSelenium")
library(RSelenium)

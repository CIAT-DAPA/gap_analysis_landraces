{
    "collab_server" : "",
    "contents" : "# Check and clean Genesys coordinates\n# H. Achicanoy\n# CIAT, 2017\n\n# R options\noptions(warn = -1); options(scipen = 999); g <- gc(reset = T); rm(list = ls())\n\n# Load packages\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(readxl))\nsuppressMessages(library(rgdal))\nsuppressMessages(library(sp))\nsuppressMessages(library(raster))\nsuppressMessages(library(ncdf4))\nsuppressMessages(library(rasterVis))\nsuppressMessages(library(htmlwidgets))\nsuppressMessages(library(compiler))\nsuppressMessages(library(leaflet))\nsuppressMessages(library(highcharter))\nsuppressMessages(library(plotly))\nsuppressMessages(library(d3heatmap))\nsuppressMessages(library(cluster))\nsuppressMessages(library(factoextra))\nsuppressMessages(library(gtools))\n\n## =================================================================================================================== ##\n## Genesys database\n## =================================================================================================================== ##\n\n# Occurrence data all\ncoll <- read.csv(\"D:/ToBackup/climate_and_crop_modelling/cwr-landraces/Input_data/genesys_bean_occ_data_all/coll.csv\")\ncore <- read.csv(\"D:/ToBackup/climate_and_crop_modelling/cwr-landraces/Input_data/genesys_bean_occ_data_all/core.csv\")\ngeo <- read.csv(\"D:/ToBackup/climate_and_crop_modelling/cwr-landraces/Input_data/genesys_bean_occ_data_all/geo.csv\")\nnames <- read.csv(\"D:/ToBackup/climate_and_crop_modelling/cwr-landraces/Input_data/genesys_bean_occ_data_all/names.csv\")\n\nnames$genesysId <- as.integer(as.character(names$genesysId))\n\n# CORE + GEO\ncore_geo <- left_join(x = core, y = geo, by = \"genesysId\")\nsum(!is.na(core_geo$longitude & core_geo$latitude))\n\n# NAMES + CORE\nnames_core <- left_join(x = names, y = core, by = \"genesysId\")\nnames_core_wout_g <- names_core[-grep(pattern = \"^G[0-9]*\", names_core$name),]\nnames_core_wout_g <- names_core_wout_g[-grep(pattern = \"^G-[0-9]*\", names_core_wout_g$name),]\nnames_core_wout_g <- names_core_wout_g[-grep(pattern = \"^G [0-9]*\", names_core_wout_g$name),]\nnames_core_wout_g <- names_core_wout_g[-grep(pattern = \"^PI [0-9]*\", names_core_wout_g$name),]\nnames_core_wout_g <- names_core_wout_g[-grep(pattern = \"^W6 [0-9]*\", names_core_wout_g$name),]\nnames_core_wout_g <- names_core_wout_g[-which(!is.na(match(names_core_wout_g$name, coll$collNumb))),]\nrownames(names_core_wout_g) <- 1:nrow(names_core_wout_g)\n\n\n# dim(unique(names_core_wout_g[,c(\"genesysId\", \"name\", \"aliasType\")]))\n# View(unique(names_core_wout_g[,c(\"genesysId\", \"name\")]))\n\n\n# Occurrence data landraces\ncoll <- read.csv(\"D:/ToBackup/climate_and_crop_modelling/cwr-landraces/Input_data/genesys_bean_occ_data_landraces/coll.csv\")\ncore <- read.csv(\"D:/ToBackup/climate_and_crop_modelling/cwr-landraces/Input_data/genesys_bean_occ_data_landraces/core.csv\")\ngeo <- read.csv(\"D:/ToBackup/climate_and_crop_modelling/cwr-landraces/Input_data/genesys_bean_occ_data_landraces/geo.csv\")\nnames <- read.csv(\"D:/ToBackup/climate_and_crop_modelling/cwr-landraces/Input_data/genesys_bean_occ_data_landraces/names.csv\")\n\nnames$genesysId <- as.integer(as.character(names$genesysId))\n\n## =================================================================================================================== ##\n## CIAT database\n## =================================================================================================================== ##\n\nciat <- read.csv(\"D:/ToBackup/climate_and_crop_modelling/cwr-landraces/Input_data/CIAT_occ_data_all/coordinates_ciatcsv.csv\")\nnrow(ciat) # 37987\n\nsum(ciat$Type.of.material == \"Landrace\", na.rm = T) # 27644\nsum(!is.na(ciat$Common.names), na.rm = T) # 37987\nsum(ciat$Type.of.material == \"Landrace\" & !is.na(ciat$Common.names), na.rm = T) # 17345\n\n# just coordinates\n# plot(ciat$`Longitude (decimal)`, ciat$`Latitude (decimal)`, pch = 20)\n\n# load shapefiles\nshp_wld <- rgdal::readOGR(dsn = \"D:/ToBackup/climate_and_crop_modelling/cwr-landraces/Input_data/GAUL_2014/gaul_2014\", layer = \"G2014_2013_1\")\n# plot(shp_wld)\n# points(ciat$`Longitude (decimal)`, ciat$`Latitude (decimal)`, pch = 20)\n\n# let just accessions with coordinates\nciat <- ciat[which(!is.na(ciat$`Longitude (decimal)`) & !is.na(ciat$`Latitude (decimal)`)),]\nrownames(ciat) <- 1:nrow(ciat)\nnrow(ciat) # 22032\n\n# Identify wrong coordinates\nover_res <- sp::over(SpatialPoints(coords = data.frame(lon = ciat$`Longitude (decimal)`, lat = ciat$`Latitude (decimal)`), proj4string = CRS(projargs = \"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\")), as(shp_wld, \"SpatialPolygons\"))\nciat$Wrong.coordinates <- as.numeric(is.na(over_res))\n# points(ciat$`Longitude (decimal)`[ciat$Wrong.coordinates == 1], ciat$`Latitude (decimal)`[ciat$Wrong.coordinates == 1], pch = 20, col = 2)\nsum(ciat$Wrong.coordinates) # 153\n\n# All records of landraces\nsum(ciat$`Type of material` == \"Landrace\", na.rm = T) # 18474\n\n# Records of landraces\nsum(ciat$`Type of material` == \"Landrace\" & ciat$Wrong.coordinates == 1, na.rm = T) # 142\n# points(ciat$`Longitude (decimal)`[ciat$`Type of material` == \"Landrace\" & ciat$Wrong.coordinates == 1], ciat$`Latitude (decimal)`[ciat$`Type of material` == \"Landrace\" & ciat$Wrong.coordinates == 1], pch = 20, col = 4, cex = 4)\n\nciat_landraces <- ciat %>% filter(`Type of material` == \"Landrace\")\nmapspam <- raster::brick(\"D:/ToBackup/climate_and_crop_modelling/cwr-landraces/Input_data/SPAM_data/spam2005v2r0_harvested-area_bean_total.nc\", lvar = 4)\nmapspam <- mapspam[[1]]\n# plot(mapspam)\n\n# levelplot(x = mapspam[[1]], par.settings = RdBuTheme)\n# hist(na.omit(mapspam[[1]][]))\n\npal <- colorNumeric(c(\"#0C2C84\", \"#41B6C4\", \"#FFFFCC\"), values(mapspam),\n                    na.color = \"transparent\")\n\nm <- leaflet() %>% addTiles() %>%\n  addRasterImage(mapspam, colors = pal, opacity = 0.8) %>%\n  addLegend(pal = pal, values = values(mapspam),\n            title = \"MapSPAM harvested area\") %>%\n  addCircles(~`Longitude (decimal)`, ~`Latitude (decimal)`, weight = 3, radius = 40, \n             color = \"#ffa500\", stroke = TRUE, fillOpacity = 0.8, data = ciat_landraces) # popup = ct$type, \n# %>% addMarkers(~`Longitude (decimal)`, ~`Latitude (decimal)`, label = ~as.character(`Common names`), data = ciat_landraces)\nsaveWidget(m, file =\" m.html\")\n\n\nplot(mapspam)\npoints(ciat_landraces$`Longitude (decimal)`, ciat_landraces$`Latitude (decimal)`, pch = 20, col = \"blue\", cex = 0.3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# set in a vector  the names of all countries\ncountryList <- unique(as.character(shp_wld@data$ADM0_NAME))\n\n# discard antarctica's country\ncountryList <- countryList[which(countryList!=\"Antarctica\")]\n\n# calculate sum of harvested area\ncalc_suma <- function(rObject ,i){\n  \n  country <- shp_wld[shp_wld@data$ADM0_NAME== countryList[i],]\n  country_data <- raster::crop(rObject, extent(country)) # cut raster by conutries shape's\n  \n  country_data <- raster::mask(x = country_data, mask = country) #create a new raster from the cropped shape  \n  \n  values <- sum(!is.na(sp::over(SpatialPoints(coords = unique(data.frame(lon = ciat_landraces$`Longitude (decimal)`,\n                                                       lat = ciat_landraces$`Latitude (decimal)`)),\n                                   proj4string = CRS(projargs = \"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\")),\n                     as(country, \"SpatialPolygons\"))), na.rm = T)\n  values2 <- sum(country_data[], na.rm = T)\n  \n  country_data <- data.frame(ADM0_CODE = shp_wld@data$ADM0_CODE[which(shp_wld@data$ADM0_NAME == countryList[i])], Country = countryList[i], Count = sum(na.omit(values)), Harvested.area = values2)\n  cat(paste0(\"Country: \", countryList[i], \" done!\\n\"))\n  return(country_data)\n\n}\n\ncalc_suma <- cmpfun(calc_suma) #convert in a compilable function\n\n\nis.compile <- function(func){\n  # this function lets us know if a function has been byte-coded or not\n  # If you have a better idea for how to do this - please let me know...\n  if(class(func) != \"function\") stop(\"You need to enter a function\")\n  last_2_lines <- tail(capture.output(func),2)\n  any(grepl(\"bytecode:\", last_2_lines)) # returns TRUE if it finds the text \"bytecode:\" in any of the last two lines of the function's print\n}\nis.compile(calc_suma)\n\nf <- list()\nfor(i in 1:length(countryList)){f[[i]] <- calc_suma(rObject = mapspam[[1]], i = i)}\ndf <- do.call(rbind, f)\ndf <- unique(df); rownames(df) <- 1:nrow(df)\nrm(f, i)\n\ndf$Count <- (df$Count - min(df$Count, na.rm = T))/(max(df$Count, na.rm = T) - min(df$Count, na.rm = T))\ndf$Harvested.area <- (df$Harvested.area - min(df$Harvested.area, na.rm = T))/(max(df$Harvested.area, na.rm = T) - min(df$Harvested.area, na.rm = T))\n\nhighchart() %>% \n  hc_title(text = \"Scatter chart with number of coordinates and median harvested area by country\") %>% \n  hc_add_series_scatter(x = df$Count, y = df$Harvested.area, color = df$Harvested.area, label = df$Country)\n\nplot_ly(df, x = df$Count, y = df$Harvested.area, \n        text = paste(df$Country),\n        mode = \"markers\", color = df$Harvested.area, size = df$Count)\n\ndf[which(df$Count > 0), c(\"Country\", \"Count\", \"Harvested.area\")] %>% gather(key = Variable, value = Value, -Country) %>%\n  ggplot(aes(x = reorder(Country, Value), y = Value, fill = Variable)) +\n  geom_bar(stat = \"identity\", position = position_dodge()) +\n  scale_fill_brewer(palette = \"Paired\") + theme_minimal() +\n  xlab(\"Country\") + ylab(\"Standarized value\") + theme(axis.text.x = element_text(angle = 90))\n\nrownames(df) <- df$Country\n\n# Seed luster = Seed brightness\n\n# EarthStat\n\nearthstat <- raster::brick(\"D:/ToBackup/climate_and_crop_modelling/cwr-landraces/Input_data/EarthStat_data/bean_HarvAreaYield2000_NetCDF/bean_AreaYieldProduction.nc\", lvar = 4)\nearthstat <- earthstat[[5]]\n\nf <- list()\nfor(i in 1:length(countryList)){f[[i]] <- calc_suma(rObject = earthstat, i = i)}\ndf2 <- do.call(rbind, f)\ndf2 <- unique(df2); rownames(df2) <- 1:nrow(df2)\nrm(f, i)\n\ndf2$Count <- (df2$Count - min(df2$Count, na.rm = T))/(max(df2$Count, na.rm = T) - min(df2$Count, na.rm = T))\ndf2$Harvested.area <- (df2$Harvested.area - min(df2$Harvested.area, na.rm = T))/(max(df2$Harvested.area, na.rm = T) - min(df2$Harvested.area, na.rm = T))\n\nhighchart() %>% \n  hc_title(text = \"Scatter chart with number of coordinates and total harvested area by country\") %>% \n  hc_add_series_scatter(x = df2$Count, y = df2$Harvested.area, color = df2$Harvested.area, label = df2$Country)\n\nplot_ly(df2, x = df2$Count, y = df2$Harvested.area, \n        text = paste(df2$Country),\n        mode = \"markers\", color = df2$Harvested.area, size = df2$Count)\n\ndf2[which(df2$Count > 0), c(\"Country\", \"Count\", \"Harvested.area\")] %>% gather(key = Variable, value = Value, -Country) %>%\n  ggplot(aes(x = reorder(Country, Value), y = Value, fill = Variable)) +\n  geom_bar(stat = \"identity\", position = position_dodge()) +\n  scale_fill_brewer(palette = \"Paired\") + theme_minimal() +\n  coord_flip() + xlab(\"Country\") + ylab(\"Standarized value\")\n\nrownames(df2) <- df2$Country\n\n## =================================================================================================================== ##\n## GRIN database\n## =================================================================================================================== ##\n\nfilename <- \"D:/ToBackup/climate_and_crop_modelling/cwr-landraces/Input_data/GRIN_occ_data_landraces/GRIN_GLOBAL_BEAN_LAND.xlsx\"\nsheet_names <- excel_sheets(filename)\n\nGRIN <- lapply(sheet_names, function(x){\n  read_excel(path = filename, sheet = x)\n}); names(GRIN) <- sheet_names; rm(sheet_names, filename)\n\nGRIN$SOURCE <- GRIN$SOURCE %>% select(Accession, Geography, `Elevation (meters)`, Longitude, Latitude)\nGRIN$ACCESSION <- GRIN$ACCESSION %>% select(Accession, Taxon, Name, Origin, Status)\nGRIN$CROP_TRAITS <- GRIN$CROP_TRAITS %>% select(Accession, `Crop Trait`, `Coded Value`, `Numeric Value`) # `Crop Trait Observation ID`\n\n# Re-arrange crops traits data\nGRIN$CROP_TRAITS <- GRIN$CROP_TRAITS %>% dplyr::filter(`Crop Trait` %in% c(\"Habit\", \"Seed color (base)\", \"Seed shape\", \"Seed luster\", \"100 Seed weight in grams\"))\nGRIN$CROP_TRAITS$Value <- GRIN$CROP_TRAITS$`Coded Value`\nGRIN$CROP_TRAITS$Value[!is.na(GRIN$CROP_TRAITS$`Numeric Value`)] <- GRIN$CROP_TRAITS$`Numeric Value`[!is.na(GRIN$CROP_TRAITS$`Numeric Value`)]\nGRIN$CROP_TRAITS$`Coded Value` <- GRIN$CROP_TRAITS$`Numeric Value` <- NULL\nGRIN$CROP_TRAITS <- GRIN$CROP_TRAITS %>%\n  group_by(`Crop Trait`, Accession) %>%\n  mutate(ind = row_number()) %>%\n  spread(`Crop Trait`, Value) %>% \n  select(Accession, Habit, `Seed color (base)`, `Seed shape`, `Seed luster`, `100 Seed weight in grams`)\nGRIN$CROP_TRAITS$`100 Seed weight in grams` <- as.numeric(as.character(GRIN$CROP_TRAITS$`100 Seed weight in grams`))\nnames(GRIN$CROP_TRAITS)[2:ncol(GRIN$CROP_TRAITS)] <- c(\"Growth.habit\", \"Seed.color\", \"Seed.shape\", \"Seed.brightness\", \"Seed.weight\")\n\nGRIN$SOURCE_CRTRAITS <- dplyr::left_join(x = GRIN$SOURCE, y = GRIN$CROP_TRAITS, by = \"Accession\")\nnames(GRIN$SOURCE_CRTRAITS)[3] <- \"Elevation\"\nGRIN$SOURCE_CRTRAITS$Geography <- NULL\n\n# Create Determinacy !!!!\n\nGRIN$SOURCE_CRTRAITS$Growth.habit <- GRIN$SOURCE_CRTRAITS$Growth.habit %>% as.character()\nGRIN$SOURCE_CRTRAITS$Seed.color <- GRIN$SOURCE_CRTRAITS$Seed.color %>% as.character()\nGRIN$SOURCE_CRTRAITS$Seed.shape <- GRIN$SOURCE_CRTRAITS$Seed.shape %>% as.character()\nGRIN$SOURCE_CRTRAITS$Seed.brightness <- GRIN$SOURCE_CRTRAITS$Seed.brightness %>% as.character()\n\nGRIN$SOURCE_CRTRAITS$Growth.habit[grep(pattern = \"Determinate bush\", x = GRIN$SOURCE_CRTRAITS$Growth.habit)] <- \"Bush\"\nGRIN$SOURCE_CRTRAITS$Growth.habit[grep(pattern = \"Indeterminate bush\", x = GRIN$SOURCE_CRTRAITS$Growth.habit)] <- \"Bush-Indeterminate\"\nGRIN$SOURCE_CRTRAITS$Growth.habit[grep(pattern = \"Indeterminate climbing\", x = GRIN$SOURCE_CRTRAITS$Growth.habit)] <- \"Climbing\"\nGRIN$SOURCE_CRTRAITS$Growth.habit[grep(pattern = \"Indeterminate prostrate or vining but not climbing\", x = GRIN$SOURCE_CRTRAITS$Growth.habit)] <- \"Prostrate-Indeterminate\"\n\nGRIN$SOURCE_CRTRAITS$Seed.color[grep(pattern = \"Dark brown\", x = GRIN$SOURCE_CRTRAITS$Seed.color)] <- \"Brown\"\nGRIN$SOURCE_CRTRAITS$Seed.color[grep(pattern = \"Light brown\", x = GRIN$SOURCE_CRTRAITS$Seed.color)] <- \"Brown\"\nGRIN$SOURCE_CRTRAITS$Seed.color[grep(pattern = \"Cream-beige\", x = GRIN$SOURCE_CRTRAITS$Seed.color)] <- \"Cream\"\nGRIN$SOURCE_CRTRAITS$Seed.color[grep(pattern = \"Dark Pink\", x = GRIN$SOURCE_CRTRAITS$Seed.color)] <- \"Pink\"\nGRIN$SOURCE_CRTRAITS$Seed.color[grep(pattern = \"Dark purple\", x = GRIN$SOURCE_CRTRAITS$Seed.color)] <- \"Purple\"\nGRIN$SOURCE_CRTRAITS$Seed.color[grep(pattern = \"Light purple\", x = GRIN$SOURCE_CRTRAITS$Seed.color)] <- \"Purple\"\nGRIN$SOURCE_CRTRAITS$Seed.color[grep(pattern = \"Dark red\", x = GRIN$SOURCE_CRTRAITS$Seed.color)] <- \"Red\"\nGRIN$SOURCE_CRTRAITS$Seed.color[grep(pattern = \"Light red\", x = GRIN$SOURCE_CRTRAITS$Seed.color)] <- \"Red\"\nGRIN$SOURCE_CRTRAITS$Seed.color[grep(pattern = \"Red-purple\", x = GRIN$SOURCE_CRTRAITS$Seed.color)] <- \"Red\"\nGRIN$SOURCE_CRTRAITS$Seed.color[grep(pattern = \"Dark yellow\", x = GRIN$SOURCE_CRTRAITS$Seed.color)] <- \"Yellow\"\nGRIN$SOURCE_CRTRAITS$Seed.color[grep(pattern = \"Light yellow\", x = GRIN$SOURCE_CRTRAITS$Seed.color)] <- \"Yellow\"\n\nGRIN$SOURCE_CRTRAITS$Seed.shape[grep(pattern = \"Reniform or kidney type\", x = GRIN$SOURCE_CRTRAITS$Seed.shape)] <- \"Kidney\"\n\nGRIN$SOURCE_CRTRAITS$Seed.brightness[grep(pattern = \"Brilliant or shiny\", x = GRIN$SOURCE_CRTRAITS$Seed.brightness)] <- \"Bright\"\nGRIN$SOURCE_CRTRAITS$Seed.brightness[grep(pattern = \"Opaque or dull\", x = GRIN$SOURCE_CRTRAITS$Seed.brightness)] <- \"Opaque\"\n\nciat2 <- ciat %>% select(Accession.number, Altitude..masl., Longitude..decimal., Latitude..decimal., Growth.habit, Seed.color, Seed.shape, Seed.brightness, X100.seed.weight..g.)\nnames(ciat2)[c(1:4, ncol(ciat2))] <- c(\"Accession\", \"Elevation\", \"Longitude\", \"Latitude\", \"Seed.weight\")\nciat2 <- ciat2 %>% separate(Seed.color, into = c(\"Seed.color\", \"Seed.color2\", \"Seed.color3\"), sep = \",\") \n\nciat2$Seed.color[grep(pattern = \"Blanco \", x = ciat2$Seed.color)] <- \"White\"\nciat2$Seed.color[grep(pattern = \"Crema \", x = ciat2$Seed.color)] <- \"Cream\"\nciat2$Seed.color[grep(pattern = \"Morado \", x = ciat2$Seed.color)] <- \"Purple\"\nciat2$Seed.color[grep(pattern = \"Rosaso\", x = ciat2$Seed.color)] <- \"Pink\"\n\nciat2 <- ciat2 %>% select(Accession, Elevation, Longitude, Latitude, Growth.habit, Seed.color, Seed.shape, Seed.brightness, Seed.weight)\nciat2$Owner <- \"CIAT\"\nGRIN$SOURCE_CRTRAITS$Owner <- \"USDA\"\n\nciat_usda <- rbind(ciat2, GRIN$SOURCE_CRTRAITS)\nif(!file.exists(\"ciat_usda_all.RDS\")){\n  saveRDS(object = ciat_usda, file = \"ciat_usda_all.RDS\")\n} else {\n  ciat_usda <- readRDS(\"ciat_usda_all.RDS\")\n}\n\n# Extract climate information on Linux servers\nbioList <- list.files(\"/mnt/data_cluster_4/observed/gridded_products/worldclim/Global_30s_v2\", full.names = T)\nbioList <- bioList[grep(pattern = \"bio\", x = bioList)]\nbioList <- bioList[grep(pattern = \"tif\", x = bioList)] %>% mixedsort\ngrep2 <- Vectorize(FUN = grep, vectorize.args = \"pattern\")\nbioList <- bioList[grep2(pattern = c(\"bio_30s_01\", \"bio_30s_05\", \"bio_30s_07\", \"bio_30s_09\", \"bio_30s_10\", \"bio_30s_14\", \"bio_30s_17\", \"bio_30s_18\"), x = bioList, fixed = F)]\nbioList <- raster::stack(bioList)\n\nclimate_data <- raster::extract(x = bioList, y = ciat_usda[,c(\"Longitude\", \"Latitude\")] %>% as.data.frame %>% na.omit)\nrow_id <- rownames(ciat_usda[,c(\"Longitude\", \"Latitude\")] %>% as.data.frame %>% na.omit)\nrow_id <- row_id %>% as.character() %>% as.numeric()\n\nclimate_data <- climate_data %>% as.data.frame()\nclimate_data$Accession <- ciat_usda$Accession[row_id]; rm(row_id, grep2)\n\ngenotypic_climate <- inner_join(x = ciat_usda, y = climate_data, by = \"Accession\")\nwrite.csv(genotypic_climate, \"genotypic_climate.csv\", row.names = F)\n\n# PCA\n# MFA\n# Stepwise Discriminant analysis\n# Canonical Discriminant analysis\n\n# Fisher transformation para variables categóricas\n# 1 componente: tamaño semilla muy util para discriminar\n# 2. Habito crecimiento, dias a floracion\n# 3. Color semilla, patron, brillo\n",
    "created" : 1499183534033.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2260598281",
    "id" : "9C83DEF4",
    "lastKnownWriteTime" : 1502735302,
    "last_content_update" : 1502735302852,
    "path" : "D:/ToBackup/climate_and_crop_modelling/cwr-landraces/Scripts/checking_input_data/check_clean_genesys_coordinates.R",
    "project_path" : "check_clean_genesys_coordinates.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}